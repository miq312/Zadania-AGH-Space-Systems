
zadanie2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000514c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08005328  08005328  00015328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005550  08005550  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005550  08005550  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005550  08005550  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000005c  080055b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080055b4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000adf1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a2  00000000  00000000  0002aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000921  00000000  00000000  0002d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025249  00000000  00000000  0002dd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c193  00000000  00000000  00052faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4a1a  00000000  00000000  0005f13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000399c  00000000  00000000  00153b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001574f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800530c 	.word	0x0800530c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	0800530c 	.word	0x0800530c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <calc_pwm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calc_pwm(float val)										//Linearyzacja dzialania ukladu
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.13f;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <calc_pwm+0x80>)
 8000bec:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <calc_pwm+0x84>)
 8000bf0:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000bf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf6:	eeb1 7a67 	vneg.f32	s14, s15
 8000bfa:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c0a:	ee17 0a90 	vmov	r0, s15
 8000c0e:	f7ff fc67 	bl	80004e0 <__aeabi_f2d>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	ec43 2b10 	vmov	d0, r2, r3
 8000c1a:	f002 fff5 	bl	8003c08 <exp>
 8000c1e:	ec51 0b10 	vmov	r0, r1, d0
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <calc_pwm+0x88>)
 8000c28:	f7ff fafc 	bl	8000224 <__adddf3>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	a109      	add	r1, pc, #36	; (adr r1, 8000c58 <calc_pwm+0x78>)
 8000c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c36:	f7ff fdd5 	bl	80007e4 <__aeabi_ddiv>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4610      	mov	r0, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	f7ff ff7d 	bl	8000b40 <__aeabi_d2f>
 8000c46:	4603      	mov	r3, r0
 8000c48:	ee07 3a90 	vmov	s15, r3
}
 8000c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	40c38800 	.word	0x40c38800
 8000c60:	3e051eb8 	.word	0x3e051eb8
 8000c64:	428c0000 	.word	0x428c0000
 8000c68:	3ff00000 	.word	0x3ff00000

08000c6c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) 	//Obsluga przerwan
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d104      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f000 fe4f 	bl	8001924 <HAL_GPIO_TogglePin>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000078 	.word	0x20000078
 8000c94:	00000000 	.word	0x00000000

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f000 fb25 	bl	80012ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f8f2 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f000 f9d0 	bl	800104c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000cac:	f000 f93a 	bl	8000f24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000cb0:	4871      	ldr	r0, [pc, #452]	; (8000e78 <main+0x1e0>)
 8000cb2:	f001 fc49 	bl	8002548 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	486f      	ldr	r0, [pc, #444]	; (8000e78 <main+0x1e0>)
 8000cba:	f001 fd1f 	bl	80026fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	486d      	ldr	r0, [pc, #436]	; (8000e78 <main+0x1e0>)
 8000cc2:	f001 fd1b 	bl	80026fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	486b      	ldr	r0, [pc, #428]	; (8000e78 <main+0x1e0>)
 8000cca:	f001 fd17 	bl	80026fc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  uint32_t last_ms = HAL_GetTick();											//Pobranie czasu pracy mikrokontrolera
 8000cd2:	f000 fb71 	bl	80013b8 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

  while (1)
  {
	  uint32_t now = HAL_GetTick();
 8000cd8:	f000 fb6e 	bl	80013b8 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]
	  if (now - last_ms >= 2000)
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ce8:	d3f6      	bcc.n	8000cd8 <main+0x40>
	  {
		  float r = 500 * (sin(counter / 31.8f));							//Wykres sinusoidalny
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8000e7c <main+0x1e4>
 8000cf8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000cfc:	ee16 0a90 	vmov	r0, s13
 8000d00:	f7ff fbee 	bl	80004e0 <__aeabi_f2d>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	ec43 2b10 	vmov	d0, r2, r3
 8000d0c:	f002 fff4 	bl	8003cf8 <sin>
 8000d10:	ec51 0b10 	vmov	r0, r1, d0
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b59      	ldr	r3, [pc, #356]	; (8000e80 <main+0x1e8>)
 8000d1a:	f7ff fc39 	bl	8000590 <__aeabi_dmul>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff ff0b 	bl	8000b40 <__aeabi_d2f>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	60bb      	str	r3, [r7, #8]
	  	  float g = 500 * (counter / 200.0f - floor(counter / 200.0f));		//Wykres w ksztalcie pily
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d38:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000e84 <main+0x1ec>
 8000d3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d40:	ee16 0a90 	vmov	r0, s13
 8000d44:	f7ff fbcc 	bl	80004e0 <__aeabi_f2d>
 8000d48:	4680      	mov	r8, r0
 8000d4a:	4689      	mov	r9, r1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d56:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000e84 <main+0x1ec>
 8000d5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d5e:	ee16 0a90 	vmov	r0, s13
 8000d62:	f7ff fbbd 	bl	80004e0 <__aeabi_f2d>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	ec43 2b10 	vmov	d0, r2, r3
 8000d6e:	f003 f827 	bl	8003dc0 <floor>
 8000d72:	ec53 2b10 	vmov	r2, r3, d0
 8000d76:	4640      	mov	r0, r8
 8000d78:	4649      	mov	r1, r9
 8000d7a:	f7ff fa51 	bl	8000220 <__aeabi_dsub>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <main+0x1e8>)
 8000d8c:	f7ff fc00 	bl	8000590 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff fed2 	bl	8000b40 <__aeabi_d2f>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	607b      	str	r3, [r7, #4]
	  	  float b = 500 * (2.0 * fabs(fmod(counter * 0.005, 1.0) - 0.5));	//Wykres w ksztalcie trojkata
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f7ff fb8b 	bl	80004bc <__aeabi_i2d>
 8000da6:	a330      	add	r3, pc, #192	; (adr r3, 8000e68 <main+0x1d0>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fbf0 	bl	8000590 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	ec43 2b17 	vmov	d7, r2, r3
 8000db8:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8000e70 <main+0x1d8>
 8000dbc:	eeb0 0a47 	vmov.f32	s0, s14
 8000dc0:	eef0 0a67 	vmov.f32	s1, s15
 8000dc4:	f002 ff68 	bl	8003c98 <fmod>
 8000dc8:	ec51 0b10 	vmov	r0, r1, d0
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <main+0x1f0>)
 8000dd2:	f7ff fa25 	bl	8000220 <__aeabi_dsub>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4614      	mov	r4, r2
 8000ddc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000de0:	4622      	mov	r2, r4
 8000de2:	462b      	mov	r3, r5
 8000de4:	4620      	mov	r0, r4
 8000de6:	4629      	mov	r1, r5
 8000de8:	f7ff fa1c 	bl	8000224 <__adddf3>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <main+0x1e8>)
 8000dfa:	f7ff fbc9 	bl	8000590 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	f7ff fe9b 	bl	8000b40 <__aeabi_d2f>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	603b      	str	r3, [r7, #0]

	  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(r));		//Zmiana wartosci parametru Pulse
 8000e0e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e12:	f7ff fee5 	bl	8000be0 <calc_pwm>
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <main+0x1e0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e22:	ee17 2a90 	vmov	r2, s15
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34
	  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, calc_pwm(g));
 8000e28:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e2c:	f7ff fed8 	bl	8000be0 <calc_pwm>
 8000e30:	eef0 7a40 	vmov.f32	s15, s0
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <main+0x1e0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3c:	ee17 2a90 	vmov	r2, s15
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
	  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(b));
 8000e42:	ed97 0a00 	vldr	s0, [r7]
 8000e46:	f7ff fecb 	bl	8000be0 <calc_pwm>
 8000e4a:	eef0 7a40 	vmov.f32	s15, s0
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <main+0x1e0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e56:	ee17 2a90 	vmov	r2, s15
 8000e5a:	63da      	str	r2, [r3, #60]	; 0x3c

	  	  counter++;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  {
 8000e62:	e739      	b.n	8000cd8 <main+0x40>
 8000e64:	f3af 8000 	nop.w
 8000e68:	47ae147b 	.word	0x47ae147b
 8000e6c:	3f747ae1 	.word	0x3f747ae1
 8000e70:	00000000 	.word	0x00000000
 8000e74:	3ff00000 	.word	0x3ff00000
 8000e78:	20000078 	.word	0x20000078
 8000e7c:	41fe6666 	.word	0x41fe6666
 8000e80:	407f4000 	.word	0x407f4000
 8000e84:	43480000 	.word	0x43480000
 8000e88:	3fe00000 	.word	0x3fe00000

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0318 	add.w	r3, r7, #24
 8000e96:	2238      	movs	r2, #56	; 0x38
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fe82 	bl	8003ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eb2:	f000 fd51 	bl	8001958 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2340      	movs	r3, #64	; 0x40
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fddb 	bl	8001aa0 <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000ef0:	f000 f8ea 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 f8df 	bl	80020d0 <HAL_RCC_ClockConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f18:	f000 f8d6 	bl	80010c8 <Error_Handler>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3750      	adds	r7, #80	; 0x50
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <MX_TIM3_Init+0x120>)
 8000f58:	4a3b      	ldr	r2, [pc, #236]	; (8001048 <MX_TIM3_Init+0x124>)
 8000f5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000f5c:	4b39      	ldr	r3, [pc, #228]	; (8001044 <MX_TIM3_Init+0x120>)
 8000f5e:	224f      	movs	r2, #79	; 0x4f
 8000f60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b38      	ldr	r3, [pc, #224]	; (8001044 <MX_TIM3_Init+0x120>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000f68:	4b36      	ldr	r3, [pc, #216]	; (8001044 <MX_TIM3_Init+0x120>)
 8000f6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b34      	ldr	r3, [pc, #208]	; (8001044 <MX_TIM3_Init+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b33      	ldr	r3, [pc, #204]	; (8001044 <MX_TIM3_Init+0x120>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7c:	4831      	ldr	r0, [pc, #196]	; (8001044 <MX_TIM3_Init+0x120>)
 8000f7e:	f001 fa8b 	bl	8002498 <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f88:	f000 f89e 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f96:	4619      	mov	r1, r3
 8000f98:	482a      	ldr	r0, [pc, #168]	; (8001044 <MX_TIM3_Init+0x120>)
 8000f9a:	f001 ff55 	bl	8002e48 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000fa4:	f000 f890 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fa8:	4826      	ldr	r0, [pc, #152]	; (8001044 <MX_TIM3_Init+0x120>)
 8000faa:	f001 fb45 	bl	8002638 <HAL_TIM_PWM_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000fb4:	f000 f888 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481f      	ldr	r0, [pc, #124]	; (8001044 <MX_TIM3_Init+0x120>)
 8000fc8:	f002 fd10 	bl	80039ec <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fd2:	f000 f879 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	; 0x60
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000fda:	2332      	movs	r3, #50	; 0x32
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4619      	mov	r1, r3
 8000fec:	4815      	ldr	r0, [pc, #84]	; (8001044 <MX_TIM3_Init+0x120>)
 8000fee:	f001 fe17 	bl	8002c20 <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ff8:	f000 f866 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8000ffc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	2204      	movs	r2, #4
 8001006:	4619      	mov	r1, r3
 8001008:	480e      	ldr	r0, [pc, #56]	; (8001044 <MX_TIM3_Init+0x120>)
 800100a:	f001 fe09 	bl	8002c20 <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8001014:	f000 f858 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8001018:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	2208      	movs	r2, #8
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <MX_TIM3_Init+0x120>)
 8001026:	f001 fdfb 	bl	8002c20 <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001030:	f000 f84a 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <MX_TIM3_Init+0x120>)
 8001036:	f000 f897 	bl	8001168 <HAL_TIM_MspPostInit>

}
 800103a:	bf00      	nop
 800103c:	3738      	adds	r7, #56	; 0x38
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000078 	.word	0x20000078
 8001048:	40000400 	.word	0x40000400

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_GPIO_Init+0x78>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <MX_GPIO_Init+0x78>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_GPIO_Init+0x78>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_GPIO_Init+0x78>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <MX_GPIO_Init+0x78>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_GPIO_Init+0x78>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2120      	movs	r1, #32
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f000 fc2b 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800109e:	2320      	movs	r3, #32
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f000 fa9a 	bl	80015f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <Error_Handler+0x8>
	...

080010d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x44>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_MspInit+0x44>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6613      	str	r3, [r2, #96]	; 0x60
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_MspInit+0x44>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x44>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x44>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x44>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_TIM_Base_MspInit+0x44>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d113      	bne.n	8001156 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_TIM_Base_MspInit+0x48>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_TIM_Base_MspInit+0x48>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_TIM_Base_MspInit+0x48>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	210a      	movs	r1, #10
 800114a:	201d      	movs	r0, #29
 800114c:	f000 fa1b 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001150:	201d      	movs	r0, #29
 8001152:	f000 fa32 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40000400 	.word	0x40000400
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_TIM_MspPostInit+0x9c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d138      	bne.n	80011fc <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_TIM_MspPostInit+0xa0>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_TIM_MspPostInit+0xa0>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_TIM_MspPostInit+0xa0>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_TIM_MspPostInit+0xa0>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_TIM_MspPostInit+0xa0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_TIM_MspPostInit+0xa0>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011ba:	2350      	movs	r3, #80	; 0x50
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ca:	2302      	movs	r3, #2
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f000 fa0a 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ec:	2302      	movs	r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_TIM_MspPostInit+0xa4>)
 80011f8:	f000 f9fa 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40000400 	.word	0x40000400
 8001208:	40021000 	.word	0x40021000
 800120c:	48000400 	.word	0x48000400

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f89a 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <TIM3_IRQHandler+0x10>)
 800126a:	f001 fb59 	bl	8002920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000078 	.word	0x20000078

08001278 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800129e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <LoopForever+0xe>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b8:	4c0b      	ldr	r4, [pc, #44]	; (80012e8 <LoopForever+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012c6:	f7ff ffd7 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f002 fc79 	bl	8003bc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ce:	f7ff fce3 	bl	8000c98 <main>

080012d2 <LoopForever>:

LoopForever:
    b LoopForever
 80012d2:	e7fe      	b.n	80012d2 <LoopForever>
  ldr   r0, =_estack
 80012d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012e0:	08005558 	.word	0x08005558
  ldr r2, =_sbss
 80012e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012e8:	20000200 	.word	0x20000200

080012ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_2_IRQHandler>

080012ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f939 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f80e 	bl	8001320 <HAL_InitTick>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	e001      	b.n	8001314 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001310:	f7ff fee0 	bl	80010d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001314:	79fb      	ldrb	r3, [r7, #7]

}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_InitTick+0x68>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d022      	beq.n	800137a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_InitTick+0x6c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_InitTick+0x68>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001340:	fbb1 f3f3 	udiv	r3, r1, r3
 8001344:	fbb2 f3f3 	udiv	r3, r2, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f944 	bl	80015d6 <HAL_SYSTICK_Config>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10f      	bne.n	8001374 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	d809      	bhi.n	800136e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135a:	2200      	movs	r2, #0
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	f04f 30ff 	mov.w	r0, #4294967295
 8001362:	f000 f910 	bl	8001586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_InitTick+0x70>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e007      	b.n	800137e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	e004      	b.n	800137e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e001      	b.n	800137e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000008 	.word	0x20000008
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <HAL_IncTick+0x1c>)
 80013a4:	6013      	str	r3, [r2, #0]
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	200000c4 	.word	0x200000c4
 80013b4:	20000008 	.word	0x20000008

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200000c4 	.word	0x200000c4

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <__NVIC_EnableIRQ+0x38>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff29 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff40 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff33 	bl	8001434 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa4 	bl	800152c <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015fe:	e15a      	b.n	80018b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 814c 	beq.w	80018b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d005      	beq.n	8001630 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800162c:	2b02      	cmp	r3, #2
 800162e:	d130      	bne.n	8001692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001666:	2201      	movs	r2, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 0201 	and.w	r2, r3, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b03      	cmp	r3, #3
 800169c:	d017      	beq.n	80016ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d123      	bne.n	8001722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0203 	and.w	r2, r3, #3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80a6 	beq.w	80018b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001764:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 8001766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001768:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6613      	str	r3, [r2, #96]	; 0x60
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 8001772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177c:	4a56      	ldr	r2, [pc, #344]	; (80018d8 <HAL_GPIO_Init+0x2e8>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a6:	d01f      	beq.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a4c      	ldr	r2, [pc, #304]	; (80018dc <HAL_GPIO_Init+0x2ec>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d019      	beq.n	80017e4 <HAL_GPIO_Init+0x1f4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a4b      	ldr	r2, [pc, #300]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d013      	beq.n	80017e0 <HAL_GPIO_Init+0x1f0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a4a      	ldr	r2, [pc, #296]	; (80018e4 <HAL_GPIO_Init+0x2f4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d00d      	beq.n	80017dc <HAL_GPIO_Init+0x1ec>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d007      	beq.n	80017d8 <HAL_GPIO_Init+0x1e8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2fc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_GPIO_Init+0x1e4>
 80017d0:	2305      	movs	r3, #5
 80017d2:	e00a      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017d4:	2306      	movs	r3, #6
 80017d6:	e008      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017d8:	2304      	movs	r3, #4
 80017da:	e006      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017dc:	2303      	movs	r3, #3
 80017de:	e004      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e002      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <HAL_GPIO_Init+0x1fa>
 80017e8:	2300      	movs	r3, #0
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	f002 0203 	and.w	r2, r2, #3
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	4093      	lsls	r3, r2
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017fa:	4937      	ldr	r1, [pc, #220]	; (80018d8 <HAL_GPIO_Init+0x2e8>)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_GPIO_Init+0x300>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800182c:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <HAL_GPIO_Init+0x300>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001856:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_GPIO_Init+0x300>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018aa:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <HAL_GPIO_Init+0x300>)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f47f ae9d 	bne.w	8001600 <HAL_GPIO_Init+0x10>
  }
}
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
 80018ca:	371c      	adds	r7, #28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	48000400 	.word	0x48000400
 80018e0:	48000800 	.word	0x48000800
 80018e4:	48000c00 	.word	0x48000c00
 80018e8:	48001000 	.word	0x48001000
 80018ec:	48001400 	.word	0x48001400
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001910:	e002      	b.n	8001918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43d9      	mvns	r1, r3
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	400b      	ands	r3, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d141      	bne.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001966:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800196e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001972:	d131      	bne.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001974:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800197a:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001980:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800198c:	4a41      	ldr	r2, [pc, #260]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001992:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001994:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2232      	movs	r2, #50	; 0x32
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	4a3f      	ldr	r2, [pc, #252]	; (8001a9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	0c9b      	lsrs	r3, r3, #18
 80019a6:	3301      	adds	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019aa:	e002      	b.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019be:	d102      	bne.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f2      	bne.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019c6:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d158      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e057      	b.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019de:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019e8:	e04d      	b.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f0:	d141      	bne.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fe:	d131      	bne.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a06:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2232      	movs	r2, #50	; 0x32
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	3301      	adds	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a36:	e002      	b.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4a:	d102      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f2      	bne.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d112      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e011      	b.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a74:	e007      	b.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40007000 	.word	0x40007000
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	431bde83 	.word	0x431bde83

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e306      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d075      	beq.n	8001baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001abe:	4b97      	ldr	r3, [pc, #604]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac8:	4b94      	ldr	r3, [pc, #592]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_OscConfig+0x3e>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d002      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x44>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d10b      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4b8d      	ldr	r3, [pc, #564]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d05b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x108>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d157      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e2e1      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d106      	bne.n	8001b14 <HAL_RCC_OscConfig+0x74>
 8001b06:	4b85      	ldr	r3, [pc, #532]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a84      	ldr	r2, [pc, #528]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x98>
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7e      	ldr	r2, [pc, #504]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b7c      	ldr	r3, [pc, #496]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7b      	ldr	r2, [pc, #492]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b38:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a77      	ldr	r2, [pc, #476]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b75      	ldr	r3, [pc, #468]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a74      	ldr	r2, [pc, #464]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fc2e 	bl	80013b8 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fc2a 	bl	80013b8 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e2a6      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b72:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0xc0>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fc1a 	bl	80013b8 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fc16 	bl	80013b8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e292      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b9a:	4b60      	ldr	r3, [pc, #384]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0xe8>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d075      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x136>
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_OscConfig+0x13c>
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d11f      	bne.n	8001c1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bdc:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x154>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e265      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	4946      	ldr	r1, [pc, #280]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c08:	4b45      	ldr	r3, [pc, #276]	; (8001d20 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fb87 	bl	8001320 <HAL_InitTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d043      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e251      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d023      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3c      	ldr	r2, [pc, #240]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fbc2 	bl	80013b8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fbbe 	bl	80013b8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e23a      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	061b      	lsls	r3, r3, #24
 8001c64:	492d      	ldr	r1, [pc, #180]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
 8001c6a:	e01a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2a      	ldr	r2, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fb9e 	bl	80013b8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fb9a 	bl	80013b8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e216      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1e0>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d041      	beq.n	8001d32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb77 	bl	80013b8 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff fb73 	bl	80013b8 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1ef      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0ef      	beq.n	8001cce <HAL_RCC_OscConfig+0x22e>
 8001cee:	e020      	b.n	8001d32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff fb5a 	bl	80013b8 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d06:	e00d      	b.n	8001d24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff fb56 	bl	80013b8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d906      	bls.n	8001d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e1d2      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ea      	bne.n	8001d08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80a6 	beq.w	8001e8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2b4>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x2b6>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a7e      	ldr	r2, [pc, #504]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
 8001d66:	4b7c      	ldr	r3, [pc, #496]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d76:	4b79      	ldr	r3, [pc, #484]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a75      	ldr	r2, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fb13 	bl	80013b8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7ff fb0f 	bl	80013b8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e18b      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da8:	4b6c      	ldr	r3, [pc, #432]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d108      	bne.n	8001dce <HAL_RCC_OscConfig+0x32e>
 8001dbc:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4a65      	ldr	r2, [pc, #404]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dcc:	e024      	b.n	8001e18 <HAL_RCC_OscConfig+0x378>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d110      	bne.n	8001df8 <HAL_RCC_OscConfig+0x358>
 8001dd6:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ddc:	4a5e      	ldr	r2, [pc, #376]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de6:	4b5c      	ldr	r3, [pc, #368]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_OscConfig+0x378>
 8001df8:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a56      	ldr	r2, [pc, #344]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d016      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff faca 	bl	80013b8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff fac6 	bl	80013b8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e140      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ed      	beq.n	8001e28 <HAL_RCC_OscConfig+0x388>
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fab3 	bl	80013b8 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff faaf 	bl	80013b8 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e129      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ed      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	4a34      	ldr	r2, [pc, #208]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01c      	beq.n	8001eda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ea6:	4a2c      	ldr	r2, [pc, #176]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fa82 	bl	80013b8 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eb8:	f7ff fa7e 	bl	80013b8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0fa      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ef      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x418>
 8001ed8:	e01b      	b.n	8001f12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7ff fa65 	bl	80013b8 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ef2:	f7ff fa61 	bl	80013b8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0dd      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80d1 	beq.w	80020be <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	f000 808b 	beq.w	8002040 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d15e      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_RCC_OscConfig+0x4b8>)
 8001f38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa3b 	bl	80013b8 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f44:	e00c      	b.n	8001f60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fa37 	bl	80013b8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d905      	bls.n	8001f60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0b3      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ec      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_RCC_OscConfig+0x62c>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6a11      	ldr	r1, [r2, #32]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7c:	3a01      	subs	r2, #1
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	4311      	orrs	r1, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f86:	0212      	lsls	r2, r2, #8
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f8e:	0852      	lsrs	r2, r2, #1
 8001f90:	3a01      	subs	r2, #1
 8001f92:	0552      	lsls	r2, r2, #21
 8001f94:	4311      	orrs	r1, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f9a:	0852      	lsrs	r2, r2, #1
 8001f9c:	3a01      	subs	r2, #1
 8001f9e:	0652      	lsls	r2, r2, #25
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fa6:	06d2      	lsls	r2, r2, #27
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	4947      	ldr	r1, [pc, #284]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a44      	ldr	r2, [pc, #272]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a41      	ldr	r2, [pc, #260]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f9f6 	bl	80013b8 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f9f2 	bl	80013b8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e06e      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x530>
 8001fee:	e066      	b.n	80020be <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ffc:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a2e      	ldr	r2, [pc, #184]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 800200e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f9ce 	bl	80013b8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f9ca 	bl	80013b8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e046      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x580>
 800203e:	e03e      	b.n	80020be <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e039      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_RCC_OscConfig+0x628>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0203 	and.w	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	429a      	cmp	r2, r3
 800205e:	d12c      	bne.n	80020ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	3b01      	subs	r3, #1
 800206c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d123      	bne.n	80020ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d11b      	bne.n	80020ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d113      	bne.n	80020ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	3b01      	subs	r3, #1
 80020a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	3b01      	subs	r3, #1
 80020b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	019f800c 	.word	0x019f800c

080020d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e11e      	b.n	8002326 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b91      	ldr	r3, [pc, #580]	; (8002330 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d910      	bls.n	8002118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b8e      	ldr	r3, [pc, #568]	; (8002330 <HAL_RCC_ClockConfig+0x260>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 020f 	bic.w	r2, r3, #15
 80020fe:	498c      	ldr	r1, [pc, #560]	; (8002330 <HAL_RCC_ClockConfig+0x260>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <HAL_RCC_ClockConfig+0x260>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e106      	b.n	8002326 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d073      	beq.n	800220c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d129      	bne.n	8002180 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212c:	4b81      	ldr	r3, [pc, #516]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0f4      	b.n	8002326 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800213c:	f000 f966 	bl	800240c <RCC_GetSysClockFreqFromPLLSource>
 8002140:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4a7c      	ldr	r2, [pc, #496]	; (8002338 <HAL_RCC_ClockConfig+0x268>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d93f      	bls.n	80021ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800214a:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800215e:	2b00      	cmp	r3, #0
 8002160:	d033      	beq.n	80021ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	d12f      	bne.n	80021ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002172:	4a70      	ldr	r2, [pc, #448]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 8002174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002178:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e024      	b.n	80021ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d107      	bne.n	8002198 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002188:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d109      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0c6      	b.n	8002326 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002198:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0be      	b.n	8002326 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021a8:	f000 f8ce 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4a61      	ldr	r2, [pc, #388]	; (8002338 <HAL_RCC_ClockConfig+0x268>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d909      	bls.n	80021ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021b6:	4b5f      	ldr	r3, [pc, #380]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021be:	4a5d      	ldr	r2, [pc, #372]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80021c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4957      	ldr	r1, [pc, #348]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021dc:	f7ff f8ec 	bl	80013b8 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff f8e8 	bl	80013b8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e095      	b.n	8002326 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b4e      	ldr	r3, [pc, #312]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d023      	beq.n	8002260 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a42      	ldr	r2, [pc, #264]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800222e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800223c:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002244:	4a3b      	ldr	r2, [pc, #236]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4936      	ldr	r1, [pc, #216]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
 800225e:	e008      	b.n	8002272 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d105      	bne.n	8002272 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002266:	4b33      	ldr	r3, [pc, #204]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4a32      	ldr	r2, [pc, #200]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 800226c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002270:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_RCC_ClockConfig+0x260>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d21d      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_ClockConfig+0x260>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 020f 	bic.w	r2, r3, #15
 8002288:	4929      	ldr	r1, [pc, #164]	; (8002330 <HAL_RCC_ClockConfig+0x260>)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002290:	f7ff f892 	bl	80013b8 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7ff f88e 	bl	80013b8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e03b      	b.n	8002326 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1ed      	bne.n	8002298 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4917      	ldr	r1, [pc, #92]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490f      	ldr	r1, [pc, #60]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022fa:	f000 f825 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCC_ClockConfig+0x264>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490c      	ldr	r1, [pc, #48]	; (800233c <HAL_RCC_ClockConfig+0x26c>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x270>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x274>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fffe 	bl	8001320 <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	04c4b400 	.word	0x04c4b400
 800233c:	08005328 	.word	0x08005328
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d102      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <HAL_RCC_GetSysClockFreq+0xbc>)
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e047      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d102      	bne.n	8002372 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_GetSysClockFreq+0xc0>)
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	e03e      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d136      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3301      	adds	r3, #1
 8002394:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d10c      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800239c:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_RCC_GetSysClockFreq+0xc0>)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a6:	68d2      	ldr	r2, [r2, #12]
 80023a8:	0a12      	lsrs	r2, r2, #8
 80023aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
      break;
 80023b4:	e00c      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023b6:	4a13      	ldr	r2, [pc, #76]	; (8002404 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c0:	68d2      	ldr	r2, [r2, #12]
 80023c2:	0a12      	lsrs	r2, r2, #8
 80023c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
      break;
 80023ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0e5b      	lsrs	r3, r3, #25
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	e001      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023f0:	693b      	ldr	r3, [r7, #16]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	00f42400 	.word	0x00f42400
 8002408:	007a1200 	.word	0x007a1200

0800240c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d10c      	bne.n	800244a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002430:	4a17      	ldr	r2, [pc, #92]	; (8002490 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800243a:	68d2      	ldr	r2, [r2, #12]
 800243c:	0a12      	lsrs	r2, r2, #8
 800243e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	617b      	str	r3, [r7, #20]
    break;
 8002448:	e00c      	b.n	8002464 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	0a12      	lsrs	r2, r2, #8
 8002458:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    break;
 8002462:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0e5b      	lsrs	r3, r3, #25
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	3301      	adds	r3, #1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800247e:	687b      	ldr	r3, [r7, #4]
}
 8002480:	4618      	mov	r0, r3
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40021000 	.word	0x40021000
 8002490:	007a1200 	.word	0x007a1200
 8002494:	00f42400 	.word	0x00f42400

08002498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e049      	b.n	800253e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fe2c 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fdf4 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d001      	beq.n	8002560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e054      	b.n	800260a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <HAL_TIM_Base_Start_IT+0xd0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d022      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x80>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258a:	d01d      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x80>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <HAL_TIM_Base_Start_IT+0xd4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d018      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x80>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_TIM_Base_Start_IT+0xd8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d013      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x80>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_TIM_Base_Start_IT+0xdc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00e      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x80>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_TIM_Base_Start_IT+0xe0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x80>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_TIM_Base_Start_IT+0xe4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d004      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x80>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_TIM_Base_Start_IT+0xe8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d115      	bne.n	80025f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_TIM_Base_Start_IT+0xec>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d015      	beq.n	8002606 <HAL_TIM_Base_Start_IT+0xbe>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e0:	d011      	beq.n	8002606 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f2:	e008      	b.n	8002606 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e000      	b.n	8002608 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002606:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40000400 	.word	0x40000400
 8002620:	40000800 	.word	0x40000800
 8002624:	40000c00 	.word	0x40000c00
 8002628:	40013400 	.word	0x40013400
 800262c:	40014000 	.word	0x40014000
 8002630:	40015000 	.word	0x40015000
 8002634:	00010007 	.word	0x00010007

08002638 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e049      	b.n	80026de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f841 	bl	80026e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3304      	adds	r3, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f000 fd24 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_TIM_PWM_Start+0x24>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e03c      	b.n	800279a <HAL_TIM_PWM_Start+0x9e>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b04      	cmp	r3, #4
 8002724:	d109      	bne.n	800273a <HAL_TIM_PWM_Start+0x3e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	bf14      	ite	ne
 8002732:	2301      	movne	r3, #1
 8002734:	2300      	moveq	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	e02f      	b.n	800279a <HAL_TIM_PWM_Start+0x9e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d109      	bne.n	8002754 <HAL_TIM_PWM_Start+0x58>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e022      	b.n	800279a <HAL_TIM_PWM_Start+0x9e>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d109      	bne.n	800276e <HAL_TIM_PWM_Start+0x72>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e015      	b.n	800279a <HAL_TIM_PWM_Start+0x9e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b10      	cmp	r3, #16
 8002772:	d109      	bne.n	8002788 <HAL_TIM_PWM_Start+0x8c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	e008      	b.n	800279a <HAL_TIM_PWM_Start+0x9e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0a6      	b.n	80028f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <HAL_TIM_PWM_Start+0xb6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b0:	e023      	b.n	80027fa <HAL_TIM_PWM_Start+0xfe>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d104      	bne.n	80027c2 <HAL_TIM_PWM_Start+0xc6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c0:	e01b      	b.n	80027fa <HAL_TIM_PWM_Start+0xfe>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d104      	bne.n	80027d2 <HAL_TIM_PWM_Start+0xd6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d0:	e013      	b.n	80027fa <HAL_TIM_PWM_Start+0xfe>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d104      	bne.n	80027e2 <HAL_TIM_PWM_Start+0xe6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027e0:	e00b      	b.n	80027fa <HAL_TIM_PWM_Start+0xfe>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d104      	bne.n	80027f2 <HAL_TIM_PWM_Start+0xf6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f0:	e003      	b.n	80027fa <HAL_TIM_PWM_Start+0xfe>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f001 f8cc 	bl	80039a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <HAL_TIM_PWM_Start+0x1fc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d018      	beq.n	8002844 <HAL_TIM_PWM_Start+0x148>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a39      	ldr	r2, [pc, #228]	; (80028fc <HAL_TIM_PWM_Start+0x200>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <HAL_TIM_PWM_Start+0x148>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a37      	ldr	r2, [pc, #220]	; (8002900 <HAL_TIM_PWM_Start+0x204>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00e      	beq.n	8002844 <HAL_TIM_PWM_Start+0x148>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a36      	ldr	r2, [pc, #216]	; (8002904 <HAL_TIM_PWM_Start+0x208>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_TIM_PWM_Start+0x148>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a34      	ldr	r2, [pc, #208]	; (8002908 <HAL_TIM_PWM_Start+0x20c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_TIM_PWM_Start+0x148>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a33      	ldr	r2, [pc, #204]	; (800290c <HAL_TIM_PWM_Start+0x210>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_TIM_PWM_Start+0x14c>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_TIM_PWM_Start+0x14e>
 8002848:	2300      	movs	r3, #0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <HAL_TIM_PWM_Start+0x1fc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1b2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d01d      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1b2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a26      	ldr	r2, [pc, #152]	; (8002910 <HAL_TIM_PWM_Start+0x214>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d018      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1b2>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_TIM_PWM_Start+0x218>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1b2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a23      	ldr	r2, [pc, #140]	; (8002918 <HAL_TIM_PWM_Start+0x21c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00e      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1b2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_TIM_PWM_Start+0x200>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1b2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_TIM_PWM_Start+0x204>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1b2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_TIM_PWM_Start+0x210>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d115      	bne.n	80028da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_TIM_PWM_Start+0x220>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b06      	cmp	r3, #6
 80028be:	d015      	beq.n	80028ec <HAL_TIM_PWM_Start+0x1f0>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c6:	d011      	beq.n	80028ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d8:	e008      	b.n	80028ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e000      	b.n	80028ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40013400 	.word	0x40013400
 8002900:	40014000 	.word	0x40014000
 8002904:	40014400 	.word	0x40014400
 8002908:	40014800 	.word	0x40014800
 800290c:	40015000 	.word	0x40015000
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800
 8002918:	40000c00 	.word	0x40000c00
 800291c:	00010007 	.word	0x00010007

08002920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0202 	mvn.w	r2, #2
 800294c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fb90 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fb82 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fb93 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d122      	bne.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b04      	cmp	r3, #4
 8002996:	d11b      	bne.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0204 	mvn.w	r2, #4
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fb66 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fb58 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fb69 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0208 	mvn.w	r2, #8
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2204      	movs	r2, #4
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fb3c 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fb2e 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fb3f 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d122      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0210 	mvn.w	r2, #16
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fb12 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fb04 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fb15 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe f8e4 	bl	8000c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f001 f82e 	bl	8003b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ade:	d10e      	bne.n	8002afe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 f821 	bl	8003b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fac3 	bl	80030b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d10e      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0220 	mvn.w	r2, #32
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 ffe1 	bl	8003b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b64:	d10f      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 ffe7 	bl	8003b54 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b94:	d10f      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 ffd9 	bl	8003b68 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc4:	d10f      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd4:	d107      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 ffcb 	bl	8003b7c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bf4:	d10f      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 ffbd 	bl	8003b90 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0ff      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b14      	cmp	r3, #20
 8002c4a:	f200 80f0 	bhi.w	8002e2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c4e:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002ca9 	.word	0x08002ca9
 8002c58:	08002e2f 	.word	0x08002e2f
 8002c5c:	08002e2f 	.word	0x08002e2f
 8002c60:	08002e2f 	.word	0x08002e2f
 8002c64:	08002ce9 	.word	0x08002ce9
 8002c68:	08002e2f 	.word	0x08002e2f
 8002c6c:	08002e2f 	.word	0x08002e2f
 8002c70:	08002e2f 	.word	0x08002e2f
 8002c74:	08002d2b 	.word	0x08002d2b
 8002c78:	08002e2f 	.word	0x08002e2f
 8002c7c:	08002e2f 	.word	0x08002e2f
 8002c80:	08002e2f 	.word	0x08002e2f
 8002c84:	08002d6b 	.word	0x08002d6b
 8002c88:	08002e2f 	.word	0x08002e2f
 8002c8c:	08002e2f 	.word	0x08002e2f
 8002c90:	08002e2f 	.word	0x08002e2f
 8002c94:	08002dad 	.word	0x08002dad
 8002c98:	08002e2f 	.word	0x08002e2f
 8002c9c:	08002e2f 	.word	0x08002e2f
 8002ca0:	08002e2f 	.word	0x08002e2f
 8002ca4:	08002ded 	.word	0x08002ded
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fab0 	bl	8003214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0208 	orr.w	r2, r2, #8
 8002cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0204 	bic.w	r2, r2, #4
 8002cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6999      	ldr	r1, [r3, #24]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	619a      	str	r2, [r3, #24]
      break;
 8002ce6:	e0a5      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fb2a 	bl	8003348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6999      	ldr	r1, [r3, #24]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	021a      	lsls	r2, r3, #8
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	619a      	str	r2, [r3, #24]
      break;
 8002d28:	e084      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fb9d 	bl	8003470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0208 	orr.w	r2, r2, #8
 8002d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0204 	bic.w	r2, r2, #4
 8002d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69d9      	ldr	r1, [r3, #28]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	61da      	str	r2, [r3, #28]
      break;
 8002d68:	e064      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fc0f 	bl	8003594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69d9      	ldr	r1, [r3, #28]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	021a      	lsls	r2, r3, #8
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	61da      	str	r2, [r3, #28]
      break;
 8002daa:	e043      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fc82 	bl	80036bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0208 	orr.w	r2, r2, #8
 8002dc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0204 	bic.w	r2, r2, #4
 8002dd6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002dea:	e023      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fccc 	bl	8003790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	021a      	lsls	r2, r3, #8
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002e2c:	e002      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
      break;
 8002e32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop

08002e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e0f6      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x20a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6f      	ldr	r2, [pc, #444]	; (800305c <HAL_TIM_ConfigClockSource+0x214>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	f000 80c1 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002ea4:	4a6d      	ldr	r2, [pc, #436]	; (800305c <HAL_TIM_ConfigClockSource+0x214>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f200 80c6 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002eac:	4a6c      	ldr	r2, [pc, #432]	; (8003060 <HAL_TIM_ConfigClockSource+0x218>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	f000 80b9 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002eb4:	4a6a      	ldr	r2, [pc, #424]	; (8003060 <HAL_TIM_ConfigClockSource+0x218>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	f200 80be 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ebc:	4a69      	ldr	r2, [pc, #420]	; (8003064 <HAL_TIM_ConfigClockSource+0x21c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	f000 80b1 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002ec4:	4a67      	ldr	r2, [pc, #412]	; (8003064 <HAL_TIM_ConfigClockSource+0x21c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	f200 80b6 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ecc:	4a66      	ldr	r2, [pc, #408]	; (8003068 <HAL_TIM_ConfigClockSource+0x220>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	f000 80a9 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002ed4:	4a64      	ldr	r2, [pc, #400]	; (8003068 <HAL_TIM_ConfigClockSource+0x220>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f200 80ae 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002edc:	4a63      	ldr	r2, [pc, #396]	; (800306c <HAL_TIM_ConfigClockSource+0x224>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	f000 80a1 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002ee4:	4a61      	ldr	r2, [pc, #388]	; (800306c <HAL_TIM_ConfigClockSource+0x224>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	f200 80a6 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002eec:	4a60      	ldr	r2, [pc, #384]	; (8003070 <HAL_TIM_ConfigClockSource+0x228>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	f000 8099 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002ef4:	4a5e      	ldr	r2, [pc, #376]	; (8003070 <HAL_TIM_ConfigClockSource+0x228>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	f200 809e 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002efc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002f00:	f000 8091 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002f04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002f08:	f200 8096 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f10:	f000 8089 	beq.w	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f18:	f200 808e 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f20:	d03e      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	f200 8087 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2e:	f000 8086 	beq.w	800303e <HAL_TIM_ConfigClockSource+0x1f6>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d87f      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f38:	2b70      	cmp	r3, #112	; 0x70
 8002f3a:	d01a      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x12a>
 8002f3c:	2b70      	cmp	r3, #112	; 0x70
 8002f3e:	d87b      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f40:	2b60      	cmp	r3, #96	; 0x60
 8002f42:	d050      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x19e>
 8002f44:	2b60      	cmp	r3, #96	; 0x60
 8002f46:	d877      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f48:	2b50      	cmp	r3, #80	; 0x50
 8002f4a:	d03c      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x17e>
 8002f4c:	2b50      	cmp	r3, #80	; 0x50
 8002f4e:	d873      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d058      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x1be>
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d86f      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f58:	2b30      	cmp	r3, #48	; 0x30
 8002f5a:	d064      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002f5c:	2b30      	cmp	r3, #48	; 0x30
 8002f5e:	d86b      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d060      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d867      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d05c      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d05a      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x1de>
 8002f70:	e062      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f000 fced 	bl	8003960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	609a      	str	r2, [r3, #8]
      break;
 8002f9e:	e04f      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f000 fcd6 	bl	8003960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc2:	609a      	str	r2, [r3, #8]
      break;
 8002fc4:	e03c      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f000 fc48 	bl	8003868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2150      	movs	r1, #80	; 0x50
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fca1 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e02c      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f000 fc67 	bl	80038c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2160      	movs	r1, #96	; 0x60
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fc91 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003004:	e01c      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 fc28 	bl	8003868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fc81 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003024:	e00c      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f000 fc78 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003036:	e003      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
      break;
 800303c:	e000      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800303e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	00100070 	.word	0x00100070
 8003060:	00100060 	.word	0x00100060
 8003064:	00100050 	.word	0x00100050
 8003068:	00100040 	.word	0x00100040
 800306c:	00100030 	.word	0x00100030
 8003070:	00100020 	.word	0x00100020

08003074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a46      	ldr	r2, [pc, #280]	; (80031f0 <TIM_Base_SetConfig+0x12c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d017      	beq.n	800310c <TIM_Base_SetConfig+0x48>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d013      	beq.n	800310c <TIM_Base_SetConfig+0x48>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a43      	ldr	r2, [pc, #268]	; (80031f4 <TIM_Base_SetConfig+0x130>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00f      	beq.n	800310c <TIM_Base_SetConfig+0x48>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a42      	ldr	r2, [pc, #264]	; (80031f8 <TIM_Base_SetConfig+0x134>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00b      	beq.n	800310c <TIM_Base_SetConfig+0x48>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a41      	ldr	r2, [pc, #260]	; (80031fc <TIM_Base_SetConfig+0x138>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d007      	beq.n	800310c <TIM_Base_SetConfig+0x48>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a40      	ldr	r2, [pc, #256]	; (8003200 <TIM_Base_SetConfig+0x13c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <TIM_Base_SetConfig+0x48>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3f      	ldr	r2, [pc, #252]	; (8003204 <TIM_Base_SetConfig+0x140>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d108      	bne.n	800311e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a33      	ldr	r2, [pc, #204]	; (80031f0 <TIM_Base_SetConfig+0x12c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d023      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d01f      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a30      	ldr	r2, [pc, #192]	; (80031f4 <TIM_Base_SetConfig+0x130>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01b      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <TIM_Base_SetConfig+0x134>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d017      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <TIM_Base_SetConfig+0x138>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <TIM_Base_SetConfig+0x13c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00f      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2d      	ldr	r2, [pc, #180]	; (8003208 <TIM_Base_SetConfig+0x144>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00b      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2c      	ldr	r2, [pc, #176]	; (800320c <TIM_Base_SetConfig+0x148>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <TIM_Base_SetConfig+0x14c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d003      	beq.n	800316e <TIM_Base_SetConfig+0xaa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <TIM_Base_SetConfig+0x140>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d108      	bne.n	8003180 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <TIM_Base_SetConfig+0x12c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <TIM_Base_SetConfig+0x110>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a14      	ldr	r2, [pc, #80]	; (8003200 <TIM_Base_SetConfig+0x13c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00f      	beq.n	80031d4 <TIM_Base_SetConfig+0x110>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a14      	ldr	r2, [pc, #80]	; (8003208 <TIM_Base_SetConfig+0x144>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <TIM_Base_SetConfig+0x110>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <TIM_Base_SetConfig+0x148>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x110>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <TIM_Base_SetConfig+0x14c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x110>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <TIM_Base_SetConfig+0x140>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	615a      	str	r2, [r3, #20]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40013400 	.word	0x40013400
 8003204:	40015000 	.word	0x40015000
 8003208:	40014000 	.word	0x40014000
 800320c:	40014400 	.word	0x40014400
 8003210:	40014800 	.word	0x40014800

08003214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0303 	bic.w	r3, r3, #3
 800324e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f023 0302 	bic.w	r3, r3, #2
 8003260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a30      	ldr	r2, [pc, #192]	; (8003330 <TIM_OC1_SetConfig+0x11c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <TIM_OC1_SetConfig+0x88>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <TIM_OC1_SetConfig+0x120>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00f      	beq.n	800329c <TIM_OC1_SetConfig+0x88>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a2e      	ldr	r2, [pc, #184]	; (8003338 <TIM_OC1_SetConfig+0x124>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00b      	beq.n	800329c <TIM_OC1_SetConfig+0x88>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a2d      	ldr	r2, [pc, #180]	; (800333c <TIM_OC1_SetConfig+0x128>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_OC1_SetConfig+0x88>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <TIM_OC1_SetConfig+0x12c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC1_SetConfig+0x88>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a2b      	ldr	r2, [pc, #172]	; (8003344 <TIM_OC1_SetConfig+0x130>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10c      	bne.n	80032b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0308 	bic.w	r3, r3, #8
 80032a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <TIM_OC1_SetConfig+0x11c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <TIM_OC1_SetConfig+0xd2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1c      	ldr	r2, [pc, #112]	; (8003334 <TIM_OC1_SetConfig+0x120>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <TIM_OC1_SetConfig+0xd2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <TIM_OC1_SetConfig+0x124>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <TIM_OC1_SetConfig+0xd2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1a      	ldr	r2, [pc, #104]	; (800333c <TIM_OC1_SetConfig+0x128>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_OC1_SetConfig+0xd2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a19      	ldr	r2, [pc, #100]	; (8003340 <TIM_OC1_SetConfig+0x12c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_OC1_SetConfig+0xd2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <TIM_OC1_SetConfig+0x130>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d111      	bne.n	800330a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	621a      	str	r2, [r3, #32]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800
 8003344:	40015000 	.word	0x40015000

08003348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f023 0210 	bic.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0320 	bic.w	r3, r3, #32
 8003396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a2c      	ldr	r2, [pc, #176]	; (8003458 <TIM_OC2_SetConfig+0x110>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_OC2_SetConfig+0x74>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a2b      	ldr	r2, [pc, #172]	; (800345c <TIM_OC2_SetConfig+0x114>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC2_SetConfig+0x74>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a2a      	ldr	r2, [pc, #168]	; (8003460 <TIM_OC2_SetConfig+0x118>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10d      	bne.n	80033d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <TIM_OC2_SetConfig+0x110>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <TIM_OC2_SetConfig+0xc0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <TIM_OC2_SetConfig+0x114>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00f      	beq.n	8003408 <TIM_OC2_SetConfig+0xc0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <TIM_OC2_SetConfig+0x11c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <TIM_OC2_SetConfig+0xc0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <TIM_OC2_SetConfig+0x120>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_OC2_SetConfig+0xc0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <TIM_OC2_SetConfig+0x124>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_OC2_SetConfig+0xc0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a17      	ldr	r2, [pc, #92]	; (8003460 <TIM_OC2_SetConfig+0x118>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d113      	bne.n	8003430 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800340e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40013400 	.word	0x40013400
 8003460:	40015000 	.word	0x40015000
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800

08003470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2b      	ldr	r2, [pc, #172]	; (800357c <TIM_OC3_SetConfig+0x10c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_OC3_SetConfig+0x72>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <TIM_OC3_SetConfig+0x110>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC3_SetConfig+0x72>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a29      	ldr	r2, [pc, #164]	; (8003584 <TIM_OC3_SetConfig+0x114>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <TIM_OC3_SetConfig+0x10c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <TIM_OC3_SetConfig+0xbe>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <TIM_OC3_SetConfig+0x110>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <TIM_OC3_SetConfig+0xbe>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <TIM_OC3_SetConfig+0x118>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_OC3_SetConfig+0xbe>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <TIM_OC3_SetConfig+0x11c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <TIM_OC3_SetConfig+0xbe>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <TIM_OC3_SetConfig+0x120>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_OC3_SetConfig+0xbe>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a16      	ldr	r2, [pc, #88]	; (8003584 <TIM_OC3_SetConfig+0x114>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	621a      	str	r2, [r3, #32]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40013400 	.word	0x40013400
 8003584:	40015000 	.word	0x40015000
 8003588:	40014000 	.word	0x40014000
 800358c:	40014400 	.word	0x40014400
 8003590:	40014800 	.word	0x40014800

08003594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a2c      	ldr	r2, [pc, #176]	; (80036a4 <TIM_OC4_SetConfig+0x110>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_OC4_SetConfig+0x74>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <TIM_OC4_SetConfig+0x114>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_OC4_SetConfig+0x74>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <TIM_OC4_SetConfig+0x118>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10d      	bne.n	8003624 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <TIM_OC4_SetConfig+0x110>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <TIM_OC4_SetConfig+0xc0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <TIM_OC4_SetConfig+0x114>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00f      	beq.n	8003654 <TIM_OC4_SetConfig+0xc0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <TIM_OC4_SetConfig+0x11c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00b      	beq.n	8003654 <TIM_OC4_SetConfig+0xc0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM_OC4_SetConfig+0x120>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d007      	beq.n	8003654 <TIM_OC4_SetConfig+0xc0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <TIM_OC4_SetConfig+0x124>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_OC4_SetConfig+0xc0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <TIM_OC4_SetConfig+0x118>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d113      	bne.n	800367c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003662:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	019b      	lsls	r3, r3, #6
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40013400 	.word	0x40013400
 80036ac:	40015000 	.word	0x40015000
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800

080036bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a19      	ldr	r2, [pc, #100]	; (8003778 <TIM_OC5_SetConfig+0xbc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <TIM_OC5_SetConfig+0x82>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a18      	ldr	r2, [pc, #96]	; (800377c <TIM_OC5_SetConfig+0xc0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00f      	beq.n	800373e <TIM_OC5_SetConfig+0x82>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <TIM_OC5_SetConfig+0xc4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_OC5_SetConfig+0x82>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <TIM_OC5_SetConfig+0xc8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_OC5_SetConfig+0x82>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a15      	ldr	r2, [pc, #84]	; (8003788 <TIM_OC5_SetConfig+0xcc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_OC5_SetConfig+0x82>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a14      	ldr	r2, [pc, #80]	; (800378c <TIM_OC5_SetConfig+0xd0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d109      	bne.n	8003752 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800
 800378c:	40015000 	.word	0x40015000

08003790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	051b      	lsls	r3, r3, #20
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <TIM_OC6_SetConfig+0xc0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <TIM_OC6_SetConfig+0x84>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a19      	ldr	r2, [pc, #100]	; (8003854 <TIM_OC6_SetConfig+0xc4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00f      	beq.n	8003814 <TIM_OC6_SetConfig+0x84>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a18      	ldr	r2, [pc, #96]	; (8003858 <TIM_OC6_SetConfig+0xc8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_OC6_SetConfig+0x84>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a17      	ldr	r2, [pc, #92]	; (800385c <TIM_OC6_SetConfig+0xcc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_OC6_SetConfig+0x84>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a16      	ldr	r2, [pc, #88]	; (8003860 <TIM_OC6_SetConfig+0xd0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_OC6_SetConfig+0x84>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a15      	ldr	r2, [pc, #84]	; (8003864 <TIM_OC6_SetConfig+0xd4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d109      	bne.n	8003828 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	029b      	lsls	r3, r3, #10
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	621a      	str	r2, [r3, #32]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40013400 	.word	0x40013400
 8003858:	40014000 	.word	0x40014000
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800
 8003864:	40015000 	.word	0x40015000

08003868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f023 030a 	bic.w	r3, r3, #10
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f023 0210 	bic.w	r2, r3, #16
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	031b      	lsls	r3, r3, #12
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	f043 0307 	orr.w	r3, r3, #7
 800394c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	021a      	lsls	r2, r3, #8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	431a      	orrs	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2201      	movs	r2, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1a      	ldr	r2, [r3, #32]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	401a      	ands	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e074      	b.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a34      	ldr	r2, [pc, #208]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a33      	ldr	r2, [pc, #204]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a31      	ldr	r2, [pc, #196]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d108      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a21      	ldr	r2, [pc, #132]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d01d      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10c      	bne.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40013400 	.word	0x40013400
 8003b04:	40015000 	.word	0x40015000
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40014000 	.word	0x40014000

08003b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <memset>:
 8003ba4:	4402      	add	r2, r0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d100      	bne.n	8003bae <memset+0xa>
 8003bac:	4770      	bx	lr
 8003bae:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb2:	e7f9      	b.n	8003ba8 <memset+0x4>

08003bb4 <__errno>:
 8003bb4:	4b01      	ldr	r3, [pc, #4]	; (8003bbc <__errno+0x8>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000058 	.word	0x20000058

08003bc0 <__libc_init_array>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	4d0d      	ldr	r5, [pc, #52]	; (8003bf8 <__libc_init_array+0x38>)
 8003bc4:	4c0d      	ldr	r4, [pc, #52]	; (8003bfc <__libc_init_array+0x3c>)
 8003bc6:	1b64      	subs	r4, r4, r5
 8003bc8:	10a4      	asrs	r4, r4, #2
 8003bca:	2600      	movs	r6, #0
 8003bcc:	42a6      	cmp	r6, r4
 8003bce:	d109      	bne.n	8003be4 <__libc_init_array+0x24>
 8003bd0:	4d0b      	ldr	r5, [pc, #44]	; (8003c00 <__libc_init_array+0x40>)
 8003bd2:	4c0c      	ldr	r4, [pc, #48]	; (8003c04 <__libc_init_array+0x44>)
 8003bd4:	f001 fb9a 	bl	800530c <_init>
 8003bd8:	1b64      	subs	r4, r4, r5
 8003bda:	10a4      	asrs	r4, r4, #2
 8003bdc:	2600      	movs	r6, #0
 8003bde:	42a6      	cmp	r6, r4
 8003be0:	d105      	bne.n	8003bee <__libc_init_array+0x2e>
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
 8003be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be8:	4798      	blx	r3
 8003bea:	3601      	adds	r6, #1
 8003bec:	e7ee      	b.n	8003bcc <__libc_init_array+0xc>
 8003bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf2:	4798      	blx	r3
 8003bf4:	3601      	adds	r6, #1
 8003bf6:	e7f2      	b.n	8003bde <__libc_init_array+0x1e>
 8003bf8:	08005550 	.word	0x08005550
 8003bfc:	08005550 	.word	0x08005550
 8003c00:	08005550 	.word	0x08005550
 8003c04:	08005554 	.word	0x08005554

08003c08 <exp>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	ed2d 8b02 	vpush	{d8}
 8003c0e:	ec55 4b10 	vmov	r4, r5, d0
 8003c12:	f000 fadd 	bl	80041d0 <__ieee754_exp>
 8003c16:	eeb0 8a40 	vmov.f32	s16, s0
 8003c1a:	eef0 8a60 	vmov.f32	s17, s1
 8003c1e:	ec45 4b10 	vmov	d0, r4, r5
 8003c22:	f000 f8c1 	bl	8003da8 <finite>
 8003c26:	b168      	cbz	r0, 8003c44 <exp+0x3c>
 8003c28:	a317      	add	r3, pc, #92	; (adr r3, 8003c88 <exp+0x80>)
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	4620      	mov	r0, r4
 8003c30:	4629      	mov	r1, r5
 8003c32:	f7fc ff3d 	bl	8000ab0 <__aeabi_dcmpgt>
 8003c36:	b160      	cbz	r0, 8003c52 <exp+0x4a>
 8003c38:	f7ff ffbc 	bl	8003bb4 <__errno>
 8003c3c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8003c78 <exp+0x70>
 8003c40:	2322      	movs	r3, #34	; 0x22
 8003c42:	6003      	str	r3, [r0, #0]
 8003c44:	eeb0 0a48 	vmov.f32	s0, s16
 8003c48:	eef0 0a68 	vmov.f32	s1, s17
 8003c4c:	ecbd 8b02 	vpop	{d8}
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
 8003c52:	a30f      	add	r3, pc, #60	; (adr r3, 8003c90 <exp+0x88>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	4620      	mov	r0, r4
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f7fc ff0a 	bl	8000a74 <__aeabi_dcmplt>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d0ef      	beq.n	8003c44 <exp+0x3c>
 8003c64:	f7ff ffa6 	bl	8003bb4 <__errno>
 8003c68:	2322      	movs	r3, #34	; 0x22
 8003c6a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8003c80 <exp+0x78>
 8003c6e:	6003      	str	r3, [r0, #0]
 8003c70:	e7e8      	b.n	8003c44 <exp+0x3c>
 8003c72:	bf00      	nop
 8003c74:	f3af 8000 	nop.w
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	7ff00000 	.word	0x7ff00000
	...
 8003c88:	fefa39ef 	.word	0xfefa39ef
 8003c8c:	40862e42 	.word	0x40862e42
 8003c90:	d52d3051 	.word	0xd52d3051
 8003c94:	c0874910 	.word	0xc0874910

08003c98 <fmod>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	ed2d 8b02 	vpush	{d8}
 8003c9e:	ec57 6b10 	vmov	r6, r7, d0
 8003ca2:	ec55 4b11 	vmov	r4, r5, d1
 8003ca6:	f000 fc15 	bl	80044d4 <__ieee754_fmod>
 8003caa:	4622      	mov	r2, r4
 8003cac:	462b      	mov	r3, r5
 8003cae:	4630      	mov	r0, r6
 8003cb0:	4639      	mov	r1, r7
 8003cb2:	eeb0 8a40 	vmov.f32	s16, s0
 8003cb6:	eef0 8a60 	vmov.f32	s17, s1
 8003cba:	f7fc ff03 	bl	8000ac4 <__aeabi_dcmpun>
 8003cbe:	b990      	cbnz	r0, 8003ce6 <fmod+0x4e>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f7fc feca 	bl	8000a60 <__aeabi_dcmpeq>
 8003ccc:	b158      	cbz	r0, 8003ce6 <fmod+0x4e>
 8003cce:	f7ff ff71 	bl	8003bb4 <__errno>
 8003cd2:	2321      	movs	r3, #33	; 0x21
 8003cd4:	6003      	str	r3, [r0, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f7fc fd81 	bl	80007e4 <__aeabi_ddiv>
 8003ce2:	ec41 0b18 	vmov	d8, r0, r1
 8003ce6:	eeb0 0a48 	vmov.f32	s0, s16
 8003cea:	eef0 0a68 	vmov.f32	s1, s17
 8003cee:	ecbd 8b02 	vpop	{d8}
 8003cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf4:	0000      	movs	r0, r0
	...

08003cf8 <sin>:
 8003cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cfa:	ec53 2b10 	vmov	r2, r3, d0
 8003cfe:	4828      	ldr	r0, [pc, #160]	; (8003da0 <sin+0xa8>)
 8003d00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d04:	4281      	cmp	r1, r0
 8003d06:	dc07      	bgt.n	8003d18 <sin+0x20>
 8003d08:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003d98 <sin+0xa0>
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	b005      	add	sp, #20
 8003d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d14:	f000 b99c 	b.w	8004050 <__kernel_sin>
 8003d18:	4822      	ldr	r0, [pc, #136]	; (8003da4 <sin+0xac>)
 8003d1a:	4281      	cmp	r1, r0
 8003d1c:	dd09      	ble.n	8003d32 <sin+0x3a>
 8003d1e:	ee10 0a10 	vmov	r0, s0
 8003d22:	4619      	mov	r1, r3
 8003d24:	f7fc fa7c 	bl	8000220 <__aeabi_dsub>
 8003d28:	ec41 0b10 	vmov	d0, r0, r1
 8003d2c:	b005      	add	sp, #20
 8003d2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d32:	4668      	mov	r0, sp
 8003d34:	f000 fcdc 	bl	80046f0 <__ieee754_rem_pio2>
 8003d38:	f000 0003 	and.w	r0, r0, #3
 8003d3c:	2801      	cmp	r0, #1
 8003d3e:	d00c      	beq.n	8003d5a <sin+0x62>
 8003d40:	2802      	cmp	r0, #2
 8003d42:	d011      	beq.n	8003d68 <sin+0x70>
 8003d44:	b9f0      	cbnz	r0, 8003d84 <sin+0x8c>
 8003d46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d4a:	ed9d 0b00 	vldr	d0, [sp]
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f000 f97e 	bl	8004050 <__kernel_sin>
 8003d54:	ec51 0b10 	vmov	r0, r1, d0
 8003d58:	e7e6      	b.n	8003d28 <sin+0x30>
 8003d5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d5e:	ed9d 0b00 	vldr	d0, [sp]
 8003d62:	f000 f8ad 	bl	8003ec0 <__kernel_cos>
 8003d66:	e7f5      	b.n	8003d54 <sin+0x5c>
 8003d68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d6c:	ed9d 0b00 	vldr	d0, [sp]
 8003d70:	2001      	movs	r0, #1
 8003d72:	f000 f96d 	bl	8004050 <__kernel_sin>
 8003d76:	ec53 2b10 	vmov	r2, r3, d0
 8003d7a:	ee10 0a10 	vmov	r0, s0
 8003d7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d82:	e7d1      	b.n	8003d28 <sin+0x30>
 8003d84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d88:	ed9d 0b00 	vldr	d0, [sp]
 8003d8c:	f000 f898 	bl	8003ec0 <__kernel_cos>
 8003d90:	e7f1      	b.n	8003d76 <sin+0x7e>
 8003d92:	bf00      	nop
 8003d94:	f3af 8000 	nop.w
	...
 8003da0:	3fe921fb 	.word	0x3fe921fb
 8003da4:	7fefffff 	.word	0x7fefffff

08003da8 <finite>:
 8003da8:	b082      	sub	sp, #8
 8003daa:	ed8d 0b00 	vstr	d0, [sp]
 8003dae:	9801      	ldr	r0, [sp, #4]
 8003db0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003db4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003db8:	0fc0      	lsrs	r0, r0, #31
 8003dba:	b002      	add	sp, #8
 8003dbc:	4770      	bx	lr
	...

08003dc0 <floor>:
 8003dc0:	ec51 0b10 	vmov	r0, r1, d0
 8003dc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dcc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8003dd0:	2e13      	cmp	r6, #19
 8003dd2:	ee10 5a10 	vmov	r5, s0
 8003dd6:	ee10 8a10 	vmov	r8, s0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	dc31      	bgt.n	8003e42 <floor+0x82>
 8003dde:	2e00      	cmp	r6, #0
 8003de0:	da14      	bge.n	8003e0c <floor+0x4c>
 8003de2:	a333      	add	r3, pc, #204	; (adr r3, 8003eb0 <floor+0xf0>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fa1c 	bl	8000224 <__adddf3>
 8003dec:	2200      	movs	r2, #0
 8003dee:	2300      	movs	r3, #0
 8003df0:	f7fc fe5e 	bl	8000ab0 <__aeabi_dcmpgt>
 8003df4:	b138      	cbz	r0, 8003e06 <floor+0x46>
 8003df6:	2c00      	cmp	r4, #0
 8003df8:	da53      	bge.n	8003ea2 <floor+0xe2>
 8003dfa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003dfe:	4325      	orrs	r5, r4
 8003e00:	d052      	beq.n	8003ea8 <floor+0xe8>
 8003e02:	4c2d      	ldr	r4, [pc, #180]	; (8003eb8 <floor+0xf8>)
 8003e04:	2500      	movs	r5, #0
 8003e06:	4621      	mov	r1, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	e024      	b.n	8003e56 <floor+0x96>
 8003e0c:	4f2b      	ldr	r7, [pc, #172]	; (8003ebc <floor+0xfc>)
 8003e0e:	4137      	asrs	r7, r6
 8003e10:	ea01 0307 	and.w	r3, r1, r7
 8003e14:	4303      	orrs	r3, r0
 8003e16:	d01e      	beq.n	8003e56 <floor+0x96>
 8003e18:	a325      	add	r3, pc, #148	; (adr r3, 8003eb0 <floor+0xf0>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc fa01 	bl	8000224 <__adddf3>
 8003e22:	2200      	movs	r2, #0
 8003e24:	2300      	movs	r3, #0
 8003e26:	f7fc fe43 	bl	8000ab0 <__aeabi_dcmpgt>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d0eb      	beq.n	8003e06 <floor+0x46>
 8003e2e:	2c00      	cmp	r4, #0
 8003e30:	bfbe      	ittt	lt
 8003e32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003e36:	4133      	asrlt	r3, r6
 8003e38:	18e4      	addlt	r4, r4, r3
 8003e3a:	ea24 0407 	bic.w	r4, r4, r7
 8003e3e:	2500      	movs	r5, #0
 8003e40:	e7e1      	b.n	8003e06 <floor+0x46>
 8003e42:	2e33      	cmp	r6, #51	; 0x33
 8003e44:	dd0b      	ble.n	8003e5e <floor+0x9e>
 8003e46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003e4a:	d104      	bne.n	8003e56 <floor+0x96>
 8003e4c:	ee10 2a10 	vmov	r2, s0
 8003e50:	460b      	mov	r3, r1
 8003e52:	f7fc f9e7 	bl	8000224 <__adddf3>
 8003e56:	ec41 0b10 	vmov	d0, r0, r1
 8003e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e5e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8003e62:	f04f 37ff 	mov.w	r7, #4294967295
 8003e66:	40df      	lsrs	r7, r3
 8003e68:	4238      	tst	r0, r7
 8003e6a:	d0f4      	beq.n	8003e56 <floor+0x96>
 8003e6c:	a310      	add	r3, pc, #64	; (adr r3, 8003eb0 <floor+0xf0>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f7fc f9d7 	bl	8000224 <__adddf3>
 8003e76:	2200      	movs	r2, #0
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f7fc fe19 	bl	8000ab0 <__aeabi_dcmpgt>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d0c1      	beq.n	8003e06 <floor+0x46>
 8003e82:	2c00      	cmp	r4, #0
 8003e84:	da0a      	bge.n	8003e9c <floor+0xdc>
 8003e86:	2e14      	cmp	r6, #20
 8003e88:	d101      	bne.n	8003e8e <floor+0xce>
 8003e8a:	3401      	adds	r4, #1
 8003e8c:	e006      	b.n	8003e9c <floor+0xdc>
 8003e8e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003e92:	2301      	movs	r3, #1
 8003e94:	40b3      	lsls	r3, r6
 8003e96:	441d      	add	r5, r3
 8003e98:	45a8      	cmp	r8, r5
 8003e9a:	d8f6      	bhi.n	8003e8a <floor+0xca>
 8003e9c:	ea25 0507 	bic.w	r5, r5, r7
 8003ea0:	e7b1      	b.n	8003e06 <floor+0x46>
 8003ea2:	2500      	movs	r5, #0
 8003ea4:	462c      	mov	r4, r5
 8003ea6:	e7ae      	b.n	8003e06 <floor+0x46>
 8003ea8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003eac:	e7ab      	b.n	8003e06 <floor+0x46>
 8003eae:	bf00      	nop
 8003eb0:	8800759c 	.word	0x8800759c
 8003eb4:	7e37e43c 	.word	0x7e37e43c
 8003eb8:	bff00000 	.word	0xbff00000
 8003ebc:	000fffff 	.word	0x000fffff

08003ec0 <__kernel_cos>:
 8003ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	ec57 6b10 	vmov	r6, r7, d0
 8003ec8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003ecc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003ed0:	ed8d 1b00 	vstr	d1, [sp]
 8003ed4:	da07      	bge.n	8003ee6 <__kernel_cos+0x26>
 8003ed6:	ee10 0a10 	vmov	r0, s0
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fc fe08 	bl	8000af0 <__aeabi_d2iz>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f000 8088 	beq.w	8003ff6 <__kernel_cos+0x136>
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	463b      	mov	r3, r7
 8003eea:	4630      	mov	r0, r6
 8003eec:	4639      	mov	r1, r7
 8003eee:	f7fc fb4f 	bl	8000590 <__aeabi_dmul>
 8003ef2:	4b51      	ldr	r3, [pc, #324]	; (8004038 <__kernel_cos+0x178>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	460d      	mov	r5, r1
 8003efa:	f7fc fb49 	bl	8000590 <__aeabi_dmul>
 8003efe:	a340      	add	r3, pc, #256	; (adr r3, 8004000 <__kernel_cos+0x140>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	4682      	mov	sl, r0
 8003f06:	468b      	mov	fp, r1
 8003f08:	4620      	mov	r0, r4
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	f7fc fb40 	bl	8000590 <__aeabi_dmul>
 8003f10:	a33d      	add	r3, pc, #244	; (adr r3, 8004008 <__kernel_cos+0x148>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f7fc f985 	bl	8000224 <__adddf3>
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	f7fc fb37 	bl	8000590 <__aeabi_dmul>
 8003f22:	a33b      	add	r3, pc, #236	; (adr r3, 8004010 <__kernel_cos+0x150>)
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f7fc f97a 	bl	8000220 <__aeabi_dsub>
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	462b      	mov	r3, r5
 8003f30:	f7fc fb2e 	bl	8000590 <__aeabi_dmul>
 8003f34:	a338      	add	r3, pc, #224	; (adr r3, 8004018 <__kernel_cos+0x158>)
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f7fc f973 	bl	8000224 <__adddf3>
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	f7fc fb25 	bl	8000590 <__aeabi_dmul>
 8003f46:	a336      	add	r3, pc, #216	; (adr r3, 8004020 <__kernel_cos+0x160>)
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f7fc f968 	bl	8000220 <__aeabi_dsub>
 8003f50:	4622      	mov	r2, r4
 8003f52:	462b      	mov	r3, r5
 8003f54:	f7fc fb1c 	bl	8000590 <__aeabi_dmul>
 8003f58:	a333      	add	r3, pc, #204	; (adr r3, 8004028 <__kernel_cos+0x168>)
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f7fc f961 	bl	8000224 <__adddf3>
 8003f62:	4622      	mov	r2, r4
 8003f64:	462b      	mov	r3, r5
 8003f66:	f7fc fb13 	bl	8000590 <__aeabi_dmul>
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	f7fc fb0f 	bl	8000590 <__aeabi_dmul>
 8003f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f76:	4604      	mov	r4, r0
 8003f78:	460d      	mov	r5, r1
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc fb07 	bl	8000590 <__aeabi_dmul>
 8003f82:	460b      	mov	r3, r1
 8003f84:	4602      	mov	r2, r0
 8003f86:	4629      	mov	r1, r5
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7fc f949 	bl	8000220 <__aeabi_dsub>
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	; (800403c <__kernel_cos+0x17c>)
 8003f90:	4598      	cmp	r8, r3
 8003f92:	4606      	mov	r6, r0
 8003f94:	460f      	mov	r7, r1
 8003f96:	dc10      	bgt.n	8003fba <__kernel_cos+0xfa>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4650      	mov	r0, sl
 8003f9e:	4659      	mov	r1, fp
 8003fa0:	f7fc f93e 	bl	8000220 <__aeabi_dsub>
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4926      	ldr	r1, [pc, #152]	; (8004040 <__kernel_cos+0x180>)
 8003fa8:	4602      	mov	r2, r0
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7fc f938 	bl	8000220 <__aeabi_dsub>
 8003fb0:	ec41 0b10 	vmov	d0, r0, r1
 8003fb4:	b003      	add	sp, #12
 8003fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <__kernel_cos+0x184>)
 8003fbc:	4920      	ldr	r1, [pc, #128]	; (8004040 <__kernel_cos+0x180>)
 8003fbe:	4598      	cmp	r8, r3
 8003fc0:	bfcc      	ite	gt
 8003fc2:	4d21      	ldrgt	r5, [pc, #132]	; (8004048 <__kernel_cos+0x188>)
 8003fc4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003fc8:	2400      	movs	r4, #0
 8003fca:	4622      	mov	r2, r4
 8003fcc:	462b      	mov	r3, r5
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f7fc f926 	bl	8000220 <__aeabi_dsub>
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	4680      	mov	r8, r0
 8003fd8:	4689      	mov	r9, r1
 8003fda:	462b      	mov	r3, r5
 8003fdc:	4650      	mov	r0, sl
 8003fde:	4659      	mov	r1, fp
 8003fe0:	f7fc f91e 	bl	8000220 <__aeabi_dsub>
 8003fe4:	4632      	mov	r2, r6
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	f7fc f91a 	bl	8000220 <__aeabi_dsub>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4640      	mov	r0, r8
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	e7da      	b.n	8003fac <__kernel_cos+0xec>
 8003ff6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004030 <__kernel_cos+0x170>
 8003ffa:	e7db      	b.n	8003fb4 <__kernel_cos+0xf4>
 8003ffc:	f3af 8000 	nop.w
 8004000:	be8838d4 	.word	0xbe8838d4
 8004004:	bda8fae9 	.word	0xbda8fae9
 8004008:	bdb4b1c4 	.word	0xbdb4b1c4
 800400c:	3e21ee9e 	.word	0x3e21ee9e
 8004010:	809c52ad 	.word	0x809c52ad
 8004014:	3e927e4f 	.word	0x3e927e4f
 8004018:	19cb1590 	.word	0x19cb1590
 800401c:	3efa01a0 	.word	0x3efa01a0
 8004020:	16c15177 	.word	0x16c15177
 8004024:	3f56c16c 	.word	0x3f56c16c
 8004028:	5555554c 	.word	0x5555554c
 800402c:	3fa55555 	.word	0x3fa55555
 8004030:	00000000 	.word	0x00000000
 8004034:	3ff00000 	.word	0x3ff00000
 8004038:	3fe00000 	.word	0x3fe00000
 800403c:	3fd33332 	.word	0x3fd33332
 8004040:	3ff00000 	.word	0x3ff00000
 8004044:	3fe90000 	.word	0x3fe90000
 8004048:	3fd20000 	.word	0x3fd20000
 800404c:	00000000 	.word	0x00000000

08004050 <__kernel_sin>:
 8004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004054:	ed2d 8b04 	vpush	{d8-d9}
 8004058:	eeb0 8a41 	vmov.f32	s16, s2
 800405c:	eef0 8a61 	vmov.f32	s17, s3
 8004060:	ec55 4b10 	vmov	r4, r5, d0
 8004064:	b083      	sub	sp, #12
 8004066:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800406a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800406e:	9001      	str	r0, [sp, #4]
 8004070:	da06      	bge.n	8004080 <__kernel_sin+0x30>
 8004072:	ee10 0a10 	vmov	r0, s0
 8004076:	4629      	mov	r1, r5
 8004078:	f7fc fd3a 	bl	8000af0 <__aeabi_d2iz>
 800407c:	2800      	cmp	r0, #0
 800407e:	d051      	beq.n	8004124 <__kernel_sin+0xd4>
 8004080:	4622      	mov	r2, r4
 8004082:	462b      	mov	r3, r5
 8004084:	4620      	mov	r0, r4
 8004086:	4629      	mov	r1, r5
 8004088:	f7fc fa82 	bl	8000590 <__aeabi_dmul>
 800408c:	4682      	mov	sl, r0
 800408e:	468b      	mov	fp, r1
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4620      	mov	r0, r4
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc fa7a 	bl	8000590 <__aeabi_dmul>
 800409c:	a341      	add	r3, pc, #260	; (adr r3, 80041a4 <__kernel_sin+0x154>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	4680      	mov	r8, r0
 80040a4:	4689      	mov	r9, r1
 80040a6:	4650      	mov	r0, sl
 80040a8:	4659      	mov	r1, fp
 80040aa:	f7fc fa71 	bl	8000590 <__aeabi_dmul>
 80040ae:	a33f      	add	r3, pc, #252	; (adr r3, 80041ac <__kernel_sin+0x15c>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f7fc f8b4 	bl	8000220 <__aeabi_dsub>
 80040b8:	4652      	mov	r2, sl
 80040ba:	465b      	mov	r3, fp
 80040bc:	f7fc fa68 	bl	8000590 <__aeabi_dmul>
 80040c0:	a33c      	add	r3, pc, #240	; (adr r3, 80041b4 <__kernel_sin+0x164>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc f8ad 	bl	8000224 <__adddf3>
 80040ca:	4652      	mov	r2, sl
 80040cc:	465b      	mov	r3, fp
 80040ce:	f7fc fa5f 	bl	8000590 <__aeabi_dmul>
 80040d2:	a33a      	add	r3, pc, #232	; (adr r3, 80041bc <__kernel_sin+0x16c>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc f8a2 	bl	8000220 <__aeabi_dsub>
 80040dc:	4652      	mov	r2, sl
 80040de:	465b      	mov	r3, fp
 80040e0:	f7fc fa56 	bl	8000590 <__aeabi_dmul>
 80040e4:	a337      	add	r3, pc, #220	; (adr r3, 80041c4 <__kernel_sin+0x174>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc f89b 	bl	8000224 <__adddf3>
 80040ee:	9b01      	ldr	r3, [sp, #4]
 80040f0:	4606      	mov	r6, r0
 80040f2:	460f      	mov	r7, r1
 80040f4:	b9eb      	cbnz	r3, 8004132 <__kernel_sin+0xe2>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4650      	mov	r0, sl
 80040fc:	4659      	mov	r1, fp
 80040fe:	f7fc fa47 	bl	8000590 <__aeabi_dmul>
 8004102:	a325      	add	r3, pc, #148	; (adr r3, 8004198 <__kernel_sin+0x148>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f7fc f88a 	bl	8000220 <__aeabi_dsub>
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	f7fc fa3e 	bl	8000590 <__aeabi_dmul>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4620      	mov	r0, r4
 800411a:	4629      	mov	r1, r5
 800411c:	f7fc f882 	bl	8000224 <__adddf3>
 8004120:	4604      	mov	r4, r0
 8004122:	460d      	mov	r5, r1
 8004124:	ec45 4b10 	vmov	d0, r4, r5
 8004128:	b003      	add	sp, #12
 800412a:	ecbd 8b04 	vpop	{d8-d9}
 800412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <__kernel_sin+0x150>)
 8004134:	ec51 0b18 	vmov	r0, r1, d8
 8004138:	2200      	movs	r2, #0
 800413a:	f7fc fa29 	bl	8000590 <__aeabi_dmul>
 800413e:	4632      	mov	r2, r6
 8004140:	ec41 0b19 	vmov	d9, r0, r1
 8004144:	463b      	mov	r3, r7
 8004146:	4640      	mov	r0, r8
 8004148:	4649      	mov	r1, r9
 800414a:	f7fc fa21 	bl	8000590 <__aeabi_dmul>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	ec51 0b19 	vmov	r0, r1, d9
 8004156:	f7fc f863 	bl	8000220 <__aeabi_dsub>
 800415a:	4652      	mov	r2, sl
 800415c:	465b      	mov	r3, fp
 800415e:	f7fc fa17 	bl	8000590 <__aeabi_dmul>
 8004162:	ec53 2b18 	vmov	r2, r3, d8
 8004166:	f7fc f85b 	bl	8000220 <__aeabi_dsub>
 800416a:	a30b      	add	r3, pc, #44	; (adr r3, 8004198 <__kernel_sin+0x148>)
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	4606      	mov	r6, r0
 8004172:	460f      	mov	r7, r1
 8004174:	4640      	mov	r0, r8
 8004176:	4649      	mov	r1, r9
 8004178:	f7fc fa0a 	bl	8000590 <__aeabi_dmul>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4630      	mov	r0, r6
 8004182:	4639      	mov	r1, r7
 8004184:	f7fc f84e 	bl	8000224 <__adddf3>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4620      	mov	r0, r4
 800418e:	4629      	mov	r1, r5
 8004190:	f7fc f846 	bl	8000220 <__aeabi_dsub>
 8004194:	e7c4      	b.n	8004120 <__kernel_sin+0xd0>
 8004196:	bf00      	nop
 8004198:	55555549 	.word	0x55555549
 800419c:	3fc55555 	.word	0x3fc55555
 80041a0:	3fe00000 	.word	0x3fe00000
 80041a4:	5acfd57c 	.word	0x5acfd57c
 80041a8:	3de5d93a 	.word	0x3de5d93a
 80041ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80041b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80041b4:	57b1fe7d 	.word	0x57b1fe7d
 80041b8:	3ec71de3 	.word	0x3ec71de3
 80041bc:	19c161d5 	.word	0x19c161d5
 80041c0:	3f2a01a0 	.word	0x3f2a01a0
 80041c4:	1110f8a6 	.word	0x1110f8a6
 80041c8:	3f811111 	.word	0x3f811111
 80041cc:	00000000 	.word	0x00000000

080041d0 <__ieee754_exp>:
 80041d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	ec55 4b10 	vmov	r4, r5, d0
 80041d8:	49b5      	ldr	r1, [pc, #724]	; (80044b0 <__ieee754_exp+0x2e0>)
 80041da:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80041de:	428a      	cmp	r2, r1
 80041e0:	ed2d 8b04 	vpush	{d8-d9}
 80041e4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80041e8:	d93b      	bls.n	8004262 <__ieee754_exp+0x92>
 80041ea:	49b2      	ldr	r1, [pc, #712]	; (80044b4 <__ieee754_exp+0x2e4>)
 80041ec:	428a      	cmp	r2, r1
 80041ee:	d916      	bls.n	800421e <__ieee754_exp+0x4e>
 80041f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80041f4:	4323      	orrs	r3, r4
 80041f6:	ee10 2a10 	vmov	r2, s0
 80041fa:	d007      	beq.n	800420c <__ieee754_exp+0x3c>
 80041fc:	462b      	mov	r3, r5
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fc f80f 	bl	8000224 <__adddf3>
 8004206:	4604      	mov	r4, r0
 8004208:	460d      	mov	r5, r1
 800420a:	e002      	b.n	8004212 <__ieee754_exp+0x42>
 800420c:	b10e      	cbz	r6, 8004212 <__ieee754_exp+0x42>
 800420e:	2400      	movs	r4, #0
 8004210:	2500      	movs	r5, #0
 8004212:	ecbd 8b04 	vpop	{d8-d9}
 8004216:	ec45 4b10 	vmov	d0, r4, r5
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421e:	a38e      	add	r3, pc, #568	; (adr r3, 8004458 <__ieee754_exp+0x288>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	ee10 0a10 	vmov	r0, s0
 8004228:	4629      	mov	r1, r5
 800422a:	f7fc fc41 	bl	8000ab0 <__aeabi_dcmpgt>
 800422e:	4607      	mov	r7, r0
 8004230:	b130      	cbz	r0, 8004240 <__ieee754_exp+0x70>
 8004232:	ecbd 8b04 	vpop	{d8-d9}
 8004236:	2000      	movs	r0, #0
 8004238:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800423c:	f000 bc8e 	b.w	8004b5c <__math_oflow>
 8004240:	a387      	add	r3, pc, #540	; (adr r3, 8004460 <__ieee754_exp+0x290>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	4620      	mov	r0, r4
 8004248:	4629      	mov	r1, r5
 800424a:	f7fc fc13 	bl	8000a74 <__aeabi_dcmplt>
 800424e:	2800      	cmp	r0, #0
 8004250:	f000 808b 	beq.w	800436a <__ieee754_exp+0x19a>
 8004254:	ecbd 8b04 	vpop	{d8-d9}
 8004258:	4638      	mov	r0, r7
 800425a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800425e:	f000 bc74 	b.w	8004b4a <__math_uflow>
 8004262:	4b95      	ldr	r3, [pc, #596]	; (80044b8 <__ieee754_exp+0x2e8>)
 8004264:	429a      	cmp	r2, r3
 8004266:	f240 80ac 	bls.w	80043c2 <__ieee754_exp+0x1f2>
 800426a:	4b94      	ldr	r3, [pc, #592]	; (80044bc <__ieee754_exp+0x2ec>)
 800426c:	429a      	cmp	r2, r3
 800426e:	d87c      	bhi.n	800436a <__ieee754_exp+0x19a>
 8004270:	4b93      	ldr	r3, [pc, #588]	; (80044c0 <__ieee754_exp+0x2f0>)
 8004272:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	ee10 0a10 	vmov	r0, s0
 800427e:	4629      	mov	r1, r5
 8004280:	f7fb ffce 	bl	8000220 <__aeabi_dsub>
 8004284:	4b8f      	ldr	r3, [pc, #572]	; (80044c4 <__ieee754_exp+0x2f4>)
 8004286:	00f7      	lsls	r7, r6, #3
 8004288:	443b      	add	r3, r7
 800428a:	ed93 7b00 	vldr	d7, [r3]
 800428e:	f1c6 0a01 	rsb	sl, r6, #1
 8004292:	4680      	mov	r8, r0
 8004294:	4689      	mov	r9, r1
 8004296:	ebaa 0a06 	sub.w	sl, sl, r6
 800429a:	eeb0 8a47 	vmov.f32	s16, s14
 800429e:	eef0 8a67 	vmov.f32	s17, s15
 80042a2:	ec53 2b18 	vmov	r2, r3, d8
 80042a6:	4640      	mov	r0, r8
 80042a8:	4649      	mov	r1, r9
 80042aa:	f7fb ffb9 	bl	8000220 <__aeabi_dsub>
 80042ae:	4604      	mov	r4, r0
 80042b0:	460d      	mov	r5, r1
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	4620      	mov	r0, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	f7fc f969 	bl	8000590 <__aeabi_dmul>
 80042be:	a36a      	add	r3, pc, #424	; (adr r3, 8004468 <__ieee754_exp+0x298>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	4606      	mov	r6, r0
 80042c6:	460f      	mov	r7, r1
 80042c8:	f7fc f962 	bl	8000590 <__aeabi_dmul>
 80042cc:	a368      	add	r3, pc, #416	; (adr r3, 8004470 <__ieee754_exp+0x2a0>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f7fb ffa5 	bl	8000220 <__aeabi_dsub>
 80042d6:	4632      	mov	r2, r6
 80042d8:	463b      	mov	r3, r7
 80042da:	f7fc f959 	bl	8000590 <__aeabi_dmul>
 80042de:	a366      	add	r3, pc, #408	; (adr r3, 8004478 <__ieee754_exp+0x2a8>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fb ff9e 	bl	8000224 <__adddf3>
 80042e8:	4632      	mov	r2, r6
 80042ea:	463b      	mov	r3, r7
 80042ec:	f7fc f950 	bl	8000590 <__aeabi_dmul>
 80042f0:	a363      	add	r3, pc, #396	; (adr r3, 8004480 <__ieee754_exp+0x2b0>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fb ff93 	bl	8000220 <__aeabi_dsub>
 80042fa:	4632      	mov	r2, r6
 80042fc:	463b      	mov	r3, r7
 80042fe:	f7fc f947 	bl	8000590 <__aeabi_dmul>
 8004302:	a361      	add	r3, pc, #388	; (adr r3, 8004488 <__ieee754_exp+0x2b8>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fb ff8c 	bl	8000224 <__adddf3>
 800430c:	4632      	mov	r2, r6
 800430e:	463b      	mov	r3, r7
 8004310:	f7fc f93e 	bl	8000590 <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4620      	mov	r0, r4
 800431a:	4629      	mov	r1, r5
 800431c:	f7fb ff80 	bl	8000220 <__aeabi_dsub>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4606      	mov	r6, r0
 8004326:	460f      	mov	r7, r1
 8004328:	4620      	mov	r0, r4
 800432a:	4629      	mov	r1, r5
 800432c:	f7fc f930 	bl	8000590 <__aeabi_dmul>
 8004330:	ec41 0b19 	vmov	d9, r0, r1
 8004334:	f1ba 0f00 	cmp.w	sl, #0
 8004338:	d15d      	bne.n	80043f6 <__ieee754_exp+0x226>
 800433a:	2200      	movs	r2, #0
 800433c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004340:	4630      	mov	r0, r6
 8004342:	4639      	mov	r1, r7
 8004344:	f7fb ff6c 	bl	8000220 <__aeabi_dsub>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	ec51 0b19 	vmov	r0, r1, d9
 8004350:	f7fc fa48 	bl	80007e4 <__aeabi_ddiv>
 8004354:	4622      	mov	r2, r4
 8004356:	462b      	mov	r3, r5
 8004358:	f7fb ff62 	bl	8000220 <__aeabi_dsub>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	2000      	movs	r0, #0
 8004362:	4959      	ldr	r1, [pc, #356]	; (80044c8 <__ieee754_exp+0x2f8>)
 8004364:	f7fb ff5c 	bl	8000220 <__aeabi_dsub>
 8004368:	e74d      	b.n	8004206 <__ieee754_exp+0x36>
 800436a:	4b58      	ldr	r3, [pc, #352]	; (80044cc <__ieee754_exp+0x2fc>)
 800436c:	4620      	mov	r0, r4
 800436e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004372:	4629      	mov	r1, r5
 8004374:	a346      	add	r3, pc, #280	; (adr r3, 8004490 <__ieee754_exp+0x2c0>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f7fc f909 	bl	8000590 <__aeabi_dmul>
 800437e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004382:	f7fb ff4f 	bl	8000224 <__adddf3>
 8004386:	f7fc fbb3 	bl	8000af0 <__aeabi_d2iz>
 800438a:	4682      	mov	sl, r0
 800438c:	f7fc f896 	bl	80004bc <__aeabi_i2d>
 8004390:	a341      	add	r3, pc, #260	; (adr r3, 8004498 <__ieee754_exp+0x2c8>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	4606      	mov	r6, r0
 8004398:	460f      	mov	r7, r1
 800439a:	f7fc f8f9 	bl	8000590 <__aeabi_dmul>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4620      	mov	r0, r4
 80043a4:	4629      	mov	r1, r5
 80043a6:	f7fb ff3b 	bl	8000220 <__aeabi_dsub>
 80043aa:	a33d      	add	r3, pc, #244	; (adr r3, 80044a0 <__ieee754_exp+0x2d0>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	4680      	mov	r8, r0
 80043b2:	4689      	mov	r9, r1
 80043b4:	4630      	mov	r0, r6
 80043b6:	4639      	mov	r1, r7
 80043b8:	f7fc f8ea 	bl	8000590 <__aeabi_dmul>
 80043bc:	ec41 0b18 	vmov	d8, r0, r1
 80043c0:	e76f      	b.n	80042a2 <__ieee754_exp+0xd2>
 80043c2:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <__ieee754_exp+0x300>)
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d811      	bhi.n	80043ec <__ieee754_exp+0x21c>
 80043c8:	a337      	add	r3, pc, #220	; (adr r3, 80044a8 <__ieee754_exp+0x2d8>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	ee10 0a10 	vmov	r0, s0
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fb ff26 	bl	8000224 <__adddf3>
 80043d8:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <__ieee754_exp+0x2f8>)
 80043da:	2200      	movs	r2, #0
 80043dc:	f7fc fb68 	bl	8000ab0 <__aeabi_dcmpgt>
 80043e0:	b138      	cbz	r0, 80043f2 <__ieee754_exp+0x222>
 80043e2:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <__ieee754_exp+0x2f8>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	e70a      	b.n	8004202 <__ieee754_exp+0x32>
 80043ec:	f04f 0a00 	mov.w	sl, #0
 80043f0:	e75f      	b.n	80042b2 <__ieee754_exp+0xe2>
 80043f2:	4682      	mov	sl, r0
 80043f4:	e75d      	b.n	80042b2 <__ieee754_exp+0xe2>
 80043f6:	4632      	mov	r2, r6
 80043f8:	463b      	mov	r3, r7
 80043fa:	2000      	movs	r0, #0
 80043fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004400:	f7fb ff0e 	bl	8000220 <__aeabi_dsub>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	ec51 0b19 	vmov	r0, r1, d9
 800440c:	f7fc f9ea 	bl	80007e4 <__aeabi_ddiv>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	ec51 0b18 	vmov	r0, r1, d8
 8004418:	f7fb ff02 	bl	8000220 <__aeabi_dsub>
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	f7fb fefe 	bl	8000220 <__aeabi_dsub>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	2000      	movs	r0, #0
 800442a:	4927      	ldr	r1, [pc, #156]	; (80044c8 <__ieee754_exp+0x2f8>)
 800442c:	f7fb fef8 	bl	8000220 <__aeabi_dsub>
 8004430:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8004434:	4592      	cmp	sl, r2
 8004436:	db02      	blt.n	800443e <__ieee754_exp+0x26e>
 8004438:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800443c:	e6e3      	b.n	8004206 <__ieee754_exp+0x36>
 800443e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8004442:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8004446:	2200      	movs	r2, #0
 8004448:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800444c:	f7fc f8a0 	bl	8000590 <__aeabi_dmul>
 8004450:	e6d9      	b.n	8004206 <__ieee754_exp+0x36>
 8004452:	bf00      	nop
 8004454:	f3af 8000 	nop.w
 8004458:	fefa39ef 	.word	0xfefa39ef
 800445c:	40862e42 	.word	0x40862e42
 8004460:	d52d3051 	.word	0xd52d3051
 8004464:	c0874910 	.word	0xc0874910
 8004468:	72bea4d0 	.word	0x72bea4d0
 800446c:	3e663769 	.word	0x3e663769
 8004470:	c5d26bf1 	.word	0xc5d26bf1
 8004474:	3ebbbd41 	.word	0x3ebbbd41
 8004478:	af25de2c 	.word	0xaf25de2c
 800447c:	3f11566a 	.word	0x3f11566a
 8004480:	16bebd93 	.word	0x16bebd93
 8004484:	3f66c16c 	.word	0x3f66c16c
 8004488:	5555553e 	.word	0x5555553e
 800448c:	3fc55555 	.word	0x3fc55555
 8004490:	652b82fe 	.word	0x652b82fe
 8004494:	3ff71547 	.word	0x3ff71547
 8004498:	fee00000 	.word	0xfee00000
 800449c:	3fe62e42 	.word	0x3fe62e42
 80044a0:	35793c76 	.word	0x35793c76
 80044a4:	3dea39ef 	.word	0x3dea39ef
 80044a8:	8800759c 	.word	0x8800759c
 80044ac:	7e37e43c 	.word	0x7e37e43c
 80044b0:	40862e41 	.word	0x40862e41
 80044b4:	7fefffff 	.word	0x7fefffff
 80044b8:	3fd62e42 	.word	0x3fd62e42
 80044bc:	3ff0a2b1 	.word	0x3ff0a2b1
 80044c0:	08005348 	.word	0x08005348
 80044c4:	08005358 	.word	0x08005358
 80044c8:	3ff00000 	.word	0x3ff00000
 80044cc:	08005338 	.word	0x08005338
 80044d0:	3defffff 	.word	0x3defffff

080044d4 <__ieee754_fmod>:
 80044d4:	ec53 2b11 	vmov	r2, r3, d1
 80044d8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80044dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e0:	ea5c 0402 	orrs.w	r4, ip, r2
 80044e4:	ec51 0b10 	vmov	r0, r1, d0
 80044e8:	ee11 7a10 	vmov	r7, s2
 80044ec:	ee11 ea10 	vmov	lr, s2
 80044f0:	461e      	mov	r6, r3
 80044f2:	d00c      	beq.n	800450e <__ieee754_fmod+0x3a>
 80044f4:	4c78      	ldr	r4, [pc, #480]	; (80046d8 <__ieee754_fmod+0x204>)
 80044f6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80044fa:	45a0      	cmp	r8, r4
 80044fc:	4689      	mov	r9, r1
 80044fe:	dc06      	bgt.n	800450e <__ieee754_fmod+0x3a>
 8004500:	4254      	negs	r4, r2
 8004502:	4d76      	ldr	r5, [pc, #472]	; (80046dc <__ieee754_fmod+0x208>)
 8004504:	4314      	orrs	r4, r2
 8004506:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800450a:	42ac      	cmp	r4, r5
 800450c:	d909      	bls.n	8004522 <__ieee754_fmod+0x4e>
 800450e:	f7fc f83f 	bl	8000590 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	f7fc f965 	bl	80007e4 <__aeabi_ddiv>
 800451a:	ec41 0b10 	vmov	d0, r0, r1
 800451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004522:	45e0      	cmp	r8, ip
 8004524:	ee10 aa10 	vmov	sl, s0
 8004528:	ee10 4a10 	vmov	r4, s0
 800452c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004530:	dc09      	bgt.n	8004546 <__ieee754_fmod+0x72>
 8004532:	dbf2      	blt.n	800451a <__ieee754_fmod+0x46>
 8004534:	4290      	cmp	r0, r2
 8004536:	d3f0      	bcc.n	800451a <__ieee754_fmod+0x46>
 8004538:	d105      	bne.n	8004546 <__ieee754_fmod+0x72>
 800453a:	4b69      	ldr	r3, [pc, #420]	; (80046e0 <__ieee754_fmod+0x20c>)
 800453c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8004540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004544:	e7e9      	b.n	800451a <__ieee754_fmod+0x46>
 8004546:	4a65      	ldr	r2, [pc, #404]	; (80046dc <__ieee754_fmod+0x208>)
 8004548:	ea19 0f02 	tst.w	r9, r2
 800454c:	d148      	bne.n	80045e0 <__ieee754_fmod+0x10c>
 800454e:	f1b8 0f00 	cmp.w	r8, #0
 8004552:	d13d      	bne.n	80045d0 <__ieee754_fmod+0xfc>
 8004554:	4963      	ldr	r1, [pc, #396]	; (80046e4 <__ieee754_fmod+0x210>)
 8004556:	4653      	mov	r3, sl
 8004558:	2b00      	cmp	r3, #0
 800455a:	dc36      	bgt.n	80045ca <__ieee754_fmod+0xf6>
 800455c:	4216      	tst	r6, r2
 800455e:	d14f      	bne.n	8004600 <__ieee754_fmod+0x12c>
 8004560:	f1bc 0f00 	cmp.w	ip, #0
 8004564:	d144      	bne.n	80045f0 <__ieee754_fmod+0x11c>
 8004566:	4a5f      	ldr	r2, [pc, #380]	; (80046e4 <__ieee754_fmod+0x210>)
 8004568:	463b      	mov	r3, r7
 800456a:	2b00      	cmp	r3, #0
 800456c:	dc3d      	bgt.n	80045ea <__ieee754_fmod+0x116>
 800456e:	485e      	ldr	r0, [pc, #376]	; (80046e8 <__ieee754_fmod+0x214>)
 8004570:	4281      	cmp	r1, r0
 8004572:	db4a      	blt.n	800460a <__ieee754_fmod+0x136>
 8004574:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457c:	485a      	ldr	r0, [pc, #360]	; (80046e8 <__ieee754_fmod+0x214>)
 800457e:	4282      	cmp	r2, r0
 8004580:	db57      	blt.n	8004632 <__ieee754_fmod+0x15e>
 8004582:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8004586:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800458a:	1a89      	subs	r1, r1, r2
 800458c:	1b98      	subs	r0, r3, r6
 800458e:	eba4 070e 	sub.w	r7, r4, lr
 8004592:	2900      	cmp	r1, #0
 8004594:	d162      	bne.n	800465c <__ieee754_fmod+0x188>
 8004596:	4574      	cmp	r4, lr
 8004598:	bf38      	it	cc
 800459a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800459e:	2800      	cmp	r0, #0
 80045a0:	bfa4      	itt	ge
 80045a2:	463c      	movge	r4, r7
 80045a4:	4603      	movge	r3, r0
 80045a6:	ea53 0104 	orrs.w	r1, r3, r4
 80045aa:	d0c6      	beq.n	800453a <__ieee754_fmod+0x66>
 80045ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b0:	db69      	blt.n	8004686 <__ieee754_fmod+0x1b2>
 80045b2:	494d      	ldr	r1, [pc, #308]	; (80046e8 <__ieee754_fmod+0x214>)
 80045b4:	428a      	cmp	r2, r1
 80045b6:	db6c      	blt.n	8004692 <__ieee754_fmod+0x1be>
 80045b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80045bc:	432b      	orrs	r3, r5
 80045be:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80045c2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80045c6:	4620      	mov	r0, r4
 80045c8:	e7a7      	b.n	800451a <__ieee754_fmod+0x46>
 80045ca:	3901      	subs	r1, #1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	e7c3      	b.n	8004558 <__ieee754_fmod+0x84>
 80045d0:	4945      	ldr	r1, [pc, #276]	; (80046e8 <__ieee754_fmod+0x214>)
 80045d2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	ddc0      	ble.n	800455c <__ieee754_fmod+0x88>
 80045da:	3901      	subs	r1, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	e7fa      	b.n	80045d6 <__ieee754_fmod+0x102>
 80045e0:	ea4f 5128 	mov.w	r1, r8, asr #20
 80045e4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80045e8:	e7b8      	b.n	800455c <__ieee754_fmod+0x88>
 80045ea:	3a01      	subs	r2, #1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	e7bc      	b.n	800456a <__ieee754_fmod+0x96>
 80045f0:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <__ieee754_fmod+0x214>)
 80045f2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	ddb9      	ble.n	800456e <__ieee754_fmod+0x9a>
 80045fa:	3a01      	subs	r2, #1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	e7fa      	b.n	80045f6 <__ieee754_fmod+0x122>
 8004600:	ea4f 522c 	mov.w	r2, ip, asr #20
 8004604:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004608:	e7b1      	b.n	800456e <__ieee754_fmod+0x9a>
 800460a:	1a40      	subs	r0, r0, r1
 800460c:	281f      	cmp	r0, #31
 800460e:	dc0a      	bgt.n	8004626 <__ieee754_fmod+0x152>
 8004610:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8004614:	fa08 f800 	lsl.w	r8, r8, r0
 8004618:	fa2a f303 	lsr.w	r3, sl, r3
 800461c:	ea43 0308 	orr.w	r3, r3, r8
 8004620:	fa0a f400 	lsl.w	r4, sl, r0
 8004624:	e7aa      	b.n	800457c <__ieee754_fmod+0xa8>
 8004626:	4b31      	ldr	r3, [pc, #196]	; (80046ec <__ieee754_fmod+0x218>)
 8004628:	1a5b      	subs	r3, r3, r1
 800462a:	fa0a f303 	lsl.w	r3, sl, r3
 800462e:	2400      	movs	r4, #0
 8004630:	e7a4      	b.n	800457c <__ieee754_fmod+0xa8>
 8004632:	1a80      	subs	r0, r0, r2
 8004634:	281f      	cmp	r0, #31
 8004636:	dc0a      	bgt.n	800464e <__ieee754_fmod+0x17a>
 8004638:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800463c:	fa0c fc00 	lsl.w	ip, ip, r0
 8004640:	fa27 f606 	lsr.w	r6, r7, r6
 8004644:	ea46 060c 	orr.w	r6, r6, ip
 8004648:	fa07 fe00 	lsl.w	lr, r7, r0
 800464c:	e79d      	b.n	800458a <__ieee754_fmod+0xb6>
 800464e:	4e27      	ldr	r6, [pc, #156]	; (80046ec <__ieee754_fmod+0x218>)
 8004650:	1ab6      	subs	r6, r6, r2
 8004652:	fa07 f606 	lsl.w	r6, r7, r6
 8004656:	f04f 0e00 	mov.w	lr, #0
 800465a:	e796      	b.n	800458a <__ieee754_fmod+0xb6>
 800465c:	4574      	cmp	r4, lr
 800465e:	bf38      	it	cc
 8004660:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8004664:	2800      	cmp	r0, #0
 8004666:	da05      	bge.n	8004674 <__ieee754_fmod+0x1a0>
 8004668:	0fe0      	lsrs	r0, r4, #31
 800466a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800466e:	0064      	lsls	r4, r4, #1
 8004670:	3901      	subs	r1, #1
 8004672:	e78b      	b.n	800458c <__ieee754_fmod+0xb8>
 8004674:	ea50 0307 	orrs.w	r3, r0, r7
 8004678:	f43f af5f 	beq.w	800453a <__ieee754_fmod+0x66>
 800467c:	0ffb      	lsrs	r3, r7, #31
 800467e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004682:	007c      	lsls	r4, r7, #1
 8004684:	e7f4      	b.n	8004670 <__ieee754_fmod+0x19c>
 8004686:	0fe1      	lsrs	r1, r4, #31
 8004688:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800468c:	0064      	lsls	r4, r4, #1
 800468e:	3a01      	subs	r2, #1
 8004690:	e78c      	b.n	80045ac <__ieee754_fmod+0xd8>
 8004692:	1a89      	subs	r1, r1, r2
 8004694:	2914      	cmp	r1, #20
 8004696:	dc0a      	bgt.n	80046ae <__ieee754_fmod+0x1da>
 8004698:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800469c:	fa03 f202 	lsl.w	r2, r3, r2
 80046a0:	40cc      	lsrs	r4, r1
 80046a2:	4322      	orrs	r2, r4
 80046a4:	410b      	asrs	r3, r1
 80046a6:	ea43 0105 	orr.w	r1, r3, r5
 80046aa:	4610      	mov	r0, r2
 80046ac:	e735      	b.n	800451a <__ieee754_fmod+0x46>
 80046ae:	291f      	cmp	r1, #31
 80046b0:	dc07      	bgt.n	80046c2 <__ieee754_fmod+0x1ee>
 80046b2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80046b6:	40cc      	lsrs	r4, r1
 80046b8:	fa03 f202 	lsl.w	r2, r3, r2
 80046bc:	4322      	orrs	r2, r4
 80046be:	462b      	mov	r3, r5
 80046c0:	e7f1      	b.n	80046a6 <__ieee754_fmod+0x1d2>
 80046c2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80046c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80046ca:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80046ce:	32e2      	adds	r2, #226	; 0xe2
 80046d0:	fa43 f202 	asr.w	r2, r3, r2
 80046d4:	e7f3      	b.n	80046be <__ieee754_fmod+0x1ea>
 80046d6:	bf00      	nop
 80046d8:	7fefffff 	.word	0x7fefffff
 80046dc:	7ff00000 	.word	0x7ff00000
 80046e0:	08005368 	.word	0x08005368
 80046e4:	fffffbed 	.word	0xfffffbed
 80046e8:	fffffc02 	.word	0xfffffc02
 80046ec:	fffffbe2 	.word	0xfffffbe2

080046f0 <__ieee754_rem_pio2>:
 80046f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f4:	ed2d 8b02 	vpush	{d8}
 80046f8:	ec55 4b10 	vmov	r4, r5, d0
 80046fc:	4bca      	ldr	r3, [pc, #808]	; (8004a28 <__ieee754_rem_pio2+0x338>)
 80046fe:	b08b      	sub	sp, #44	; 0x2c
 8004700:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004704:	4598      	cmp	r8, r3
 8004706:	4682      	mov	sl, r0
 8004708:	9502      	str	r5, [sp, #8]
 800470a:	dc08      	bgt.n	800471e <__ieee754_rem_pio2+0x2e>
 800470c:	2200      	movs	r2, #0
 800470e:	2300      	movs	r3, #0
 8004710:	ed80 0b00 	vstr	d0, [r0]
 8004714:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004718:	f04f 0b00 	mov.w	fp, #0
 800471c:	e028      	b.n	8004770 <__ieee754_rem_pio2+0x80>
 800471e:	4bc3      	ldr	r3, [pc, #780]	; (8004a2c <__ieee754_rem_pio2+0x33c>)
 8004720:	4598      	cmp	r8, r3
 8004722:	dc78      	bgt.n	8004816 <__ieee754_rem_pio2+0x126>
 8004724:	9b02      	ldr	r3, [sp, #8]
 8004726:	4ec2      	ldr	r6, [pc, #776]	; (8004a30 <__ieee754_rem_pio2+0x340>)
 8004728:	2b00      	cmp	r3, #0
 800472a:	ee10 0a10 	vmov	r0, s0
 800472e:	a3b0      	add	r3, pc, #704	; (adr r3, 80049f0 <__ieee754_rem_pio2+0x300>)
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	4629      	mov	r1, r5
 8004736:	dd39      	ble.n	80047ac <__ieee754_rem_pio2+0xbc>
 8004738:	f7fb fd72 	bl	8000220 <__aeabi_dsub>
 800473c:	45b0      	cmp	r8, r6
 800473e:	4604      	mov	r4, r0
 8004740:	460d      	mov	r5, r1
 8004742:	d01b      	beq.n	800477c <__ieee754_rem_pio2+0x8c>
 8004744:	a3ac      	add	r3, pc, #688	; (adr r3, 80049f8 <__ieee754_rem_pio2+0x308>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f7fb fd69 	bl	8000220 <__aeabi_dsub>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	e9ca 2300 	strd	r2, r3, [sl]
 8004756:	4620      	mov	r0, r4
 8004758:	4629      	mov	r1, r5
 800475a:	f7fb fd61 	bl	8000220 <__aeabi_dsub>
 800475e:	a3a6      	add	r3, pc, #664	; (adr r3, 80049f8 <__ieee754_rem_pio2+0x308>)
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f7fb fd5c 	bl	8000220 <__aeabi_dsub>
 8004768:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800476c:	f04f 0b01 	mov.w	fp, #1
 8004770:	4658      	mov	r0, fp
 8004772:	b00b      	add	sp, #44	; 0x2c
 8004774:	ecbd 8b02 	vpop	{d8}
 8004778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x310>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fb fd4d 	bl	8000220 <__aeabi_dsub>
 8004786:	a3a0      	add	r3, pc, #640	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x318>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	4604      	mov	r4, r0
 800478e:	460d      	mov	r5, r1
 8004790:	f7fb fd46 	bl	8000220 <__aeabi_dsub>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	e9ca 2300 	strd	r2, r3, [sl]
 800479c:	4620      	mov	r0, r4
 800479e:	4629      	mov	r1, r5
 80047a0:	f7fb fd3e 	bl	8000220 <__aeabi_dsub>
 80047a4:	a398      	add	r3, pc, #608	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x318>)
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	e7db      	b.n	8004764 <__ieee754_rem_pio2+0x74>
 80047ac:	f7fb fd3a 	bl	8000224 <__adddf3>
 80047b0:	45b0      	cmp	r8, r6
 80047b2:	4604      	mov	r4, r0
 80047b4:	460d      	mov	r5, r1
 80047b6:	d016      	beq.n	80047e6 <__ieee754_rem_pio2+0xf6>
 80047b8:	a38f      	add	r3, pc, #572	; (adr r3, 80049f8 <__ieee754_rem_pio2+0x308>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fb fd31 	bl	8000224 <__adddf3>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	e9ca 2300 	strd	r2, r3, [sl]
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7fb fd27 	bl	8000220 <__aeabi_dsub>
 80047d2:	a389      	add	r3, pc, #548	; (adr r3, 80049f8 <__ieee754_rem_pio2+0x308>)
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fb fd24 	bl	8000224 <__adddf3>
 80047dc:	f04f 3bff 	mov.w	fp, #4294967295
 80047e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047e4:	e7c4      	b.n	8004770 <__ieee754_rem_pio2+0x80>
 80047e6:	a386      	add	r3, pc, #536	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x310>)
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f7fb fd1a 	bl	8000224 <__adddf3>
 80047f0:	a385      	add	r3, pc, #532	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x318>)
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	4604      	mov	r4, r0
 80047f8:	460d      	mov	r5, r1
 80047fa:	f7fb fd13 	bl	8000224 <__adddf3>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	e9ca 2300 	strd	r2, r3, [sl]
 8004806:	4620      	mov	r0, r4
 8004808:	4629      	mov	r1, r5
 800480a:	f7fb fd09 	bl	8000220 <__aeabi_dsub>
 800480e:	a37e      	add	r3, pc, #504	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x318>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	e7e0      	b.n	80047d8 <__ieee754_rem_pio2+0xe8>
 8004816:	4b87      	ldr	r3, [pc, #540]	; (8004a34 <__ieee754_rem_pio2+0x344>)
 8004818:	4598      	cmp	r8, r3
 800481a:	f300 80d8 	bgt.w	80049ce <__ieee754_rem_pio2+0x2de>
 800481e:	f000 f96d 	bl	8004afc <fabs>
 8004822:	ec55 4b10 	vmov	r4, r5, d0
 8004826:	ee10 0a10 	vmov	r0, s0
 800482a:	a379      	add	r3, pc, #484	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x320>)
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	4629      	mov	r1, r5
 8004832:	f7fb fead 	bl	8000590 <__aeabi_dmul>
 8004836:	4b80      	ldr	r3, [pc, #512]	; (8004a38 <__ieee754_rem_pio2+0x348>)
 8004838:	2200      	movs	r2, #0
 800483a:	f7fb fcf3 	bl	8000224 <__adddf3>
 800483e:	f7fc f957 	bl	8000af0 <__aeabi_d2iz>
 8004842:	4683      	mov	fp, r0
 8004844:	f7fb fe3a 	bl	80004bc <__aeabi_i2d>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	ec43 2b18 	vmov	d8, r2, r3
 8004850:	a367      	add	r3, pc, #412	; (adr r3, 80049f0 <__ieee754_rem_pio2+0x300>)
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f7fb fe9b 	bl	8000590 <__aeabi_dmul>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4620      	mov	r0, r4
 8004860:	4629      	mov	r1, r5
 8004862:	f7fb fcdd 	bl	8000220 <__aeabi_dsub>
 8004866:	a364      	add	r3, pc, #400	; (adr r3, 80049f8 <__ieee754_rem_pio2+0x308>)
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	4606      	mov	r6, r0
 800486e:	460f      	mov	r7, r1
 8004870:	ec51 0b18 	vmov	r0, r1, d8
 8004874:	f7fb fe8c 	bl	8000590 <__aeabi_dmul>
 8004878:	f1bb 0f1f 	cmp.w	fp, #31
 800487c:	4604      	mov	r4, r0
 800487e:	460d      	mov	r5, r1
 8004880:	dc0d      	bgt.n	800489e <__ieee754_rem_pio2+0x1ae>
 8004882:	4b6e      	ldr	r3, [pc, #440]	; (8004a3c <__ieee754_rem_pio2+0x34c>)
 8004884:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488c:	4543      	cmp	r3, r8
 800488e:	d006      	beq.n	800489e <__ieee754_rem_pio2+0x1ae>
 8004890:	4622      	mov	r2, r4
 8004892:	462b      	mov	r3, r5
 8004894:	4630      	mov	r0, r6
 8004896:	4639      	mov	r1, r7
 8004898:	f7fb fcc2 	bl	8000220 <__aeabi_dsub>
 800489c:	e00e      	b.n	80048bc <__ieee754_rem_pio2+0x1cc>
 800489e:	462b      	mov	r3, r5
 80048a0:	4622      	mov	r2, r4
 80048a2:	4630      	mov	r0, r6
 80048a4:	4639      	mov	r1, r7
 80048a6:	f7fb fcbb 	bl	8000220 <__aeabi_dsub>
 80048aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80048ae:	9303      	str	r3, [sp, #12]
 80048b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80048b4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	dc02      	bgt.n	80048c2 <__ieee754_rem_pio2+0x1d2>
 80048bc:	e9ca 0100 	strd	r0, r1, [sl]
 80048c0:	e039      	b.n	8004936 <__ieee754_rem_pio2+0x246>
 80048c2:	a34f      	add	r3, pc, #316	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x310>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	ec51 0b18 	vmov	r0, r1, d8
 80048cc:	f7fb fe60 	bl	8000590 <__aeabi_dmul>
 80048d0:	4604      	mov	r4, r0
 80048d2:	460d      	mov	r5, r1
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4630      	mov	r0, r6
 80048da:	4639      	mov	r1, r7
 80048dc:	f7fb fca0 	bl	8000220 <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4680      	mov	r8, r0
 80048e6:	4689      	mov	r9, r1
 80048e8:	4630      	mov	r0, r6
 80048ea:	4639      	mov	r1, r7
 80048ec:	f7fb fc98 	bl	8000220 <__aeabi_dsub>
 80048f0:	4622      	mov	r2, r4
 80048f2:	462b      	mov	r3, r5
 80048f4:	f7fb fc94 	bl	8000220 <__aeabi_dsub>
 80048f8:	a343      	add	r3, pc, #268	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x318>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	4604      	mov	r4, r0
 8004900:	460d      	mov	r5, r1
 8004902:	ec51 0b18 	vmov	r0, r1, d8
 8004906:	f7fb fe43 	bl	8000590 <__aeabi_dmul>
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	f7fb fc87 	bl	8000220 <__aeabi_dsub>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4604      	mov	r4, r0
 8004918:	460d      	mov	r5, r1
 800491a:	4640      	mov	r0, r8
 800491c:	4649      	mov	r1, r9
 800491e:	f7fb fc7f 	bl	8000220 <__aeabi_dsub>
 8004922:	9a03      	ldr	r2, [sp, #12]
 8004924:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b31      	cmp	r3, #49	; 0x31
 800492c:	dc24      	bgt.n	8004978 <__ieee754_rem_pio2+0x288>
 800492e:	e9ca 0100 	strd	r0, r1, [sl]
 8004932:	4646      	mov	r6, r8
 8004934:	464f      	mov	r7, r9
 8004936:	e9da 8900 	ldrd	r8, r9, [sl]
 800493a:	4630      	mov	r0, r6
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	4639      	mov	r1, r7
 8004942:	f7fb fc6d 	bl	8000220 <__aeabi_dsub>
 8004946:	462b      	mov	r3, r5
 8004948:	4622      	mov	r2, r4
 800494a:	f7fb fc69 	bl	8000220 <__aeabi_dsub>
 800494e:	9b02      	ldr	r3, [sp, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004956:	f6bf af0b 	bge.w	8004770 <__ieee754_rem_pio2+0x80>
 800495a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800495e:	f8ca 3004 	str.w	r3, [sl, #4]
 8004962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004966:	f8ca 8000 	str.w	r8, [sl]
 800496a:	f8ca 0008 	str.w	r0, [sl, #8]
 800496e:	f8ca 300c 	str.w	r3, [sl, #12]
 8004972:	f1cb 0b00 	rsb	fp, fp, #0
 8004976:	e6fb      	b.n	8004770 <__ieee754_rem_pio2+0x80>
 8004978:	a327      	add	r3, pc, #156	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x328>)
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	ec51 0b18 	vmov	r0, r1, d8
 8004982:	f7fb fe05 	bl	8000590 <__aeabi_dmul>
 8004986:	4604      	mov	r4, r0
 8004988:	460d      	mov	r5, r1
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4640      	mov	r0, r8
 8004990:	4649      	mov	r1, r9
 8004992:	f7fb fc45 	bl	8000220 <__aeabi_dsub>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4606      	mov	r6, r0
 800499c:	460f      	mov	r7, r1
 800499e:	4640      	mov	r0, r8
 80049a0:	4649      	mov	r1, r9
 80049a2:	f7fb fc3d 	bl	8000220 <__aeabi_dsub>
 80049a6:	4622      	mov	r2, r4
 80049a8:	462b      	mov	r3, r5
 80049aa:	f7fb fc39 	bl	8000220 <__aeabi_dsub>
 80049ae:	a31c      	add	r3, pc, #112	; (adr r3, 8004a20 <__ieee754_rem_pio2+0x330>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	4604      	mov	r4, r0
 80049b6:	460d      	mov	r5, r1
 80049b8:	ec51 0b18 	vmov	r0, r1, d8
 80049bc:	f7fb fde8 	bl	8000590 <__aeabi_dmul>
 80049c0:	4622      	mov	r2, r4
 80049c2:	462b      	mov	r3, r5
 80049c4:	f7fb fc2c 	bl	8000220 <__aeabi_dsub>
 80049c8:	4604      	mov	r4, r0
 80049ca:	460d      	mov	r5, r1
 80049cc:	e760      	b.n	8004890 <__ieee754_rem_pio2+0x1a0>
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <__ieee754_rem_pio2+0x350>)
 80049d0:	4598      	cmp	r8, r3
 80049d2:	dd37      	ble.n	8004a44 <__ieee754_rem_pio2+0x354>
 80049d4:	ee10 2a10 	vmov	r2, s0
 80049d8:	462b      	mov	r3, r5
 80049da:	4620      	mov	r0, r4
 80049dc:	4629      	mov	r1, r5
 80049de:	f7fb fc1f 	bl	8000220 <__aeabi_dsub>
 80049e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80049e6:	e9ca 0100 	strd	r0, r1, [sl]
 80049ea:	e695      	b.n	8004718 <__ieee754_rem_pio2+0x28>
 80049ec:	f3af 8000 	nop.w
 80049f0:	54400000 	.word	0x54400000
 80049f4:	3ff921fb 	.word	0x3ff921fb
 80049f8:	1a626331 	.word	0x1a626331
 80049fc:	3dd0b461 	.word	0x3dd0b461
 8004a00:	1a600000 	.word	0x1a600000
 8004a04:	3dd0b461 	.word	0x3dd0b461
 8004a08:	2e037073 	.word	0x2e037073
 8004a0c:	3ba3198a 	.word	0x3ba3198a
 8004a10:	6dc9c883 	.word	0x6dc9c883
 8004a14:	3fe45f30 	.word	0x3fe45f30
 8004a18:	2e000000 	.word	0x2e000000
 8004a1c:	3ba3198a 	.word	0x3ba3198a
 8004a20:	252049c1 	.word	0x252049c1
 8004a24:	397b839a 	.word	0x397b839a
 8004a28:	3fe921fb 	.word	0x3fe921fb
 8004a2c:	4002d97b 	.word	0x4002d97b
 8004a30:	3ff921fb 	.word	0x3ff921fb
 8004a34:	413921fb 	.word	0x413921fb
 8004a38:	3fe00000 	.word	0x3fe00000
 8004a3c:	08005378 	.word	0x08005378
 8004a40:	7fefffff 	.word	0x7fefffff
 8004a44:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004a48:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8004a4c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8004a50:	4620      	mov	r0, r4
 8004a52:	460d      	mov	r5, r1
 8004a54:	f7fc f84c 	bl	8000af0 <__aeabi_d2iz>
 8004a58:	f7fb fd30 	bl	80004bc <__aeabi_i2d>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4620      	mov	r0, r4
 8004a62:	4629      	mov	r1, r5
 8004a64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a68:	f7fb fbda 	bl	8000220 <__aeabi_dsub>
 8004a6c:	4b21      	ldr	r3, [pc, #132]	; (8004af4 <__ieee754_rem_pio2+0x404>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f7fb fd8e 	bl	8000590 <__aeabi_dmul>
 8004a74:	460d      	mov	r5, r1
 8004a76:	4604      	mov	r4, r0
 8004a78:	f7fc f83a 	bl	8000af0 <__aeabi_d2iz>
 8004a7c:	f7fb fd1e 	bl	80004bc <__aeabi_i2d>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a8c:	f7fb fbc8 	bl	8000220 <__aeabi_dsub>
 8004a90:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <__ieee754_rem_pio2+0x404>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	f7fb fd7c 	bl	8000590 <__aeabi_dmul>
 8004a98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a9c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004aa0:	2703      	movs	r7, #3
 8004aa2:	2400      	movs	r4, #0
 8004aa4:	2500      	movs	r5, #0
 8004aa6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	46b9      	mov	r9, r7
 8004ab0:	3f01      	subs	r7, #1
 8004ab2:	f7fb ffd5 	bl	8000a60 <__aeabi_dcmpeq>
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d1f5      	bne.n	8004aa6 <__ieee754_rem_pio2+0x3b6>
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <__ieee754_rem_pio2+0x408>)
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	2302      	movs	r3, #2
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4632      	mov	r2, r6
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	a804      	add	r0, sp, #16
 8004aca:	f000 f851 	bl	8004b70 <__kernel_rem_pio2>
 8004ace:	9b02      	ldr	r3, [sp, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	4683      	mov	fp, r0
 8004ad4:	f6bf ae4c 	bge.w	8004770 <__ieee754_rem_pio2+0x80>
 8004ad8:	e9da 2100 	ldrd	r2, r1, [sl]
 8004adc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ae0:	e9ca 2300 	strd	r2, r3, [sl]
 8004ae4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004ae8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004aec:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004af0:	e73f      	b.n	8004972 <__ieee754_rem_pio2+0x282>
 8004af2:	bf00      	nop
 8004af4:	41700000 	.word	0x41700000
 8004af8:	080053f8 	.word	0x080053f8

08004afc <fabs>:
 8004afc:	ec51 0b10 	vmov	r0, r1, d0
 8004b00:	ee10 2a10 	vmov	r2, s0
 8004b04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b08:	ec43 2b10 	vmov	d0, r2, r3
 8004b0c:	4770      	bx	lr

08004b0e <with_errno>:
 8004b0e:	b570      	push	{r4, r5, r6, lr}
 8004b10:	4604      	mov	r4, r0
 8004b12:	460d      	mov	r5, r1
 8004b14:	4616      	mov	r6, r2
 8004b16:	f7ff f84d 	bl	8003bb4 <__errno>
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	6006      	str	r6, [r0, #0]
 8004b1e:	4620      	mov	r0, r4
 8004b20:	bd70      	pop	{r4, r5, r6, pc}

08004b22 <xflow>:
 8004b22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b24:	4614      	mov	r4, r2
 8004b26:	461d      	mov	r5, r3
 8004b28:	b108      	cbz	r0, 8004b2e <xflow+0xc>
 8004b2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8004b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b36:	4620      	mov	r0, r4
 8004b38:	4629      	mov	r1, r5
 8004b3a:	f7fb fd29 	bl	8000590 <__aeabi_dmul>
 8004b3e:	2222      	movs	r2, #34	; 0x22
 8004b40:	b003      	add	sp, #12
 8004b42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b46:	f7ff bfe2 	b.w	8004b0e <with_errno>

08004b4a <__math_uflow>:
 8004b4a:	b508      	push	{r3, lr}
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b52:	f7ff ffe6 	bl	8004b22 <xflow>
 8004b56:	ec41 0b10 	vmov	d0, r0, r1
 8004b5a:	bd08      	pop	{r3, pc}

08004b5c <__math_oflow>:
 8004b5c:	b508      	push	{r3, lr}
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004b64:	f7ff ffdd 	bl	8004b22 <xflow>
 8004b68:	ec41 0b10 	vmov	d0, r0, r1
 8004b6c:	bd08      	pop	{r3, pc}
	...

08004b70 <__kernel_rem_pio2>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	ed2d 8b02 	vpush	{d8}
 8004b78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004b7c:	f112 0f14 	cmn.w	r2, #20
 8004b80:	9306      	str	r3, [sp, #24]
 8004b82:	9104      	str	r1, [sp, #16]
 8004b84:	4bc2      	ldr	r3, [pc, #776]	; (8004e90 <__kernel_rem_pio2+0x320>)
 8004b86:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004b88:	9009      	str	r0, [sp, #36]	; 0x24
 8004b8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	9b06      	ldr	r3, [sp, #24]
 8004b92:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b96:	bfa8      	it	ge
 8004b98:	1ed4      	subge	r4, r2, #3
 8004b9a:	9305      	str	r3, [sp, #20]
 8004b9c:	bfb2      	itee	lt
 8004b9e:	2400      	movlt	r4, #0
 8004ba0:	2318      	movge	r3, #24
 8004ba2:	fb94 f4f3 	sdivge	r4, r4, r3
 8004ba6:	f06f 0317 	mvn.w	r3, #23
 8004baa:	fb04 3303 	mla	r3, r4, r3, r3
 8004bae:	eb03 0a02 	add.w	sl, r3, r2
 8004bb2:	9b00      	ldr	r3, [sp, #0]
 8004bb4:	9a05      	ldr	r2, [sp, #20]
 8004bb6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004e80 <__kernel_rem_pio2+0x310>
 8004bba:	eb03 0802 	add.w	r8, r3, r2
 8004bbe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004bc0:	1aa7      	subs	r7, r4, r2
 8004bc2:	ae20      	add	r6, sp, #128	; 0x80
 8004bc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004bc8:	2500      	movs	r5, #0
 8004bca:	4545      	cmp	r5, r8
 8004bcc:	dd13      	ble.n	8004bf6 <__kernel_rem_pio2+0x86>
 8004bce:	9b06      	ldr	r3, [sp, #24]
 8004bd0:	aa20      	add	r2, sp, #128	; 0x80
 8004bd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004bd6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004bda:	f04f 0800 	mov.w	r8, #0
 8004bde:	9b00      	ldr	r3, [sp, #0]
 8004be0:	4598      	cmp	r8, r3
 8004be2:	dc31      	bgt.n	8004c48 <__kernel_rem_pio2+0xd8>
 8004be4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004e80 <__kernel_rem_pio2+0x310>
 8004be8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004bec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004bf0:	462f      	mov	r7, r5
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	e01b      	b.n	8004c2e <__kernel_rem_pio2+0xbe>
 8004bf6:	42ef      	cmn	r7, r5
 8004bf8:	d407      	bmi.n	8004c0a <__kernel_rem_pio2+0x9a>
 8004bfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004bfe:	f7fb fc5d 	bl	80004bc <__aeabi_i2d>
 8004c02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004c06:	3501      	adds	r5, #1
 8004c08:	e7df      	b.n	8004bca <__kernel_rem_pio2+0x5a>
 8004c0a:	ec51 0b18 	vmov	r0, r1, d8
 8004c0e:	e7f8      	b.n	8004c02 <__kernel_rem_pio2+0x92>
 8004c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004c18:	f7fb fcba 	bl	8000590 <__aeabi_dmul>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c24:	f7fb fafe 	bl	8000224 <__adddf3>
 8004c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c2c:	3601      	adds	r6, #1
 8004c2e:	9b05      	ldr	r3, [sp, #20]
 8004c30:	429e      	cmp	r6, r3
 8004c32:	f1a7 0708 	sub.w	r7, r7, #8
 8004c36:	ddeb      	ble.n	8004c10 <__kernel_rem_pio2+0xa0>
 8004c38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c3c:	f108 0801 	add.w	r8, r8, #1
 8004c40:	ecab 7b02 	vstmia	fp!, {d7}
 8004c44:	3508      	adds	r5, #8
 8004c46:	e7ca      	b.n	8004bde <__kernel_rem_pio2+0x6e>
 8004c48:	9b00      	ldr	r3, [sp, #0]
 8004c4a:	aa0c      	add	r2, sp, #48	; 0x30
 8004c4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c52:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004c54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004c58:	9c00      	ldr	r4, [sp, #0]
 8004c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c5c:	00e3      	lsls	r3, r4, #3
 8004c5e:	9308      	str	r3, [sp, #32]
 8004c60:	ab98      	add	r3, sp, #608	; 0x260
 8004c62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004c6a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004c6e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004c74:	46c3      	mov	fp, r8
 8004c76:	46a1      	mov	r9, r4
 8004c78:	f1b9 0f00 	cmp.w	r9, #0
 8004c7c:	f1a5 0508 	sub.w	r5, r5, #8
 8004c80:	dc77      	bgt.n	8004d72 <__kernel_rem_pio2+0x202>
 8004c82:	ec47 6b10 	vmov	d0, r6, r7
 8004c86:	4650      	mov	r0, sl
 8004c88:	f000 fac2 	bl	8005210 <scalbn>
 8004c8c:	ec57 6b10 	vmov	r6, r7, d0
 8004c90:	2200      	movs	r2, #0
 8004c92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004c96:	ee10 0a10 	vmov	r0, s0
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	f7fb fc78 	bl	8000590 <__aeabi_dmul>
 8004ca0:	ec41 0b10 	vmov	d0, r0, r1
 8004ca4:	f7ff f88c 	bl	8003dc0 <floor>
 8004ca8:	4b7a      	ldr	r3, [pc, #488]	; (8004e94 <__kernel_rem_pio2+0x324>)
 8004caa:	ec51 0b10 	vmov	r0, r1, d0
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f7fb fc6e 	bl	8000590 <__aeabi_dmul>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4630      	mov	r0, r6
 8004cba:	4639      	mov	r1, r7
 8004cbc:	f7fb fab0 	bl	8000220 <__aeabi_dsub>
 8004cc0:	460f      	mov	r7, r1
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	f7fb ff14 	bl	8000af0 <__aeabi_d2iz>
 8004cc8:	9002      	str	r0, [sp, #8]
 8004cca:	f7fb fbf7 	bl	80004bc <__aeabi_i2d>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	f7fb faa3 	bl	8000220 <__aeabi_dsub>
 8004cda:	f1ba 0f00 	cmp.w	sl, #0
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460f      	mov	r7, r1
 8004ce2:	dd6d      	ble.n	8004dc0 <__kernel_rem_pio2+0x250>
 8004ce4:	1e61      	subs	r1, r4, #1
 8004ce6:	ab0c      	add	r3, sp, #48	; 0x30
 8004ce8:	9d02      	ldr	r5, [sp, #8]
 8004cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004cee:	f1ca 0018 	rsb	r0, sl, #24
 8004cf2:	fa43 f200 	asr.w	r2, r3, r0
 8004cf6:	4415      	add	r5, r2
 8004cf8:	4082      	lsls	r2, r0
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	aa0c      	add	r2, sp, #48	; 0x30
 8004cfe:	9502      	str	r5, [sp, #8]
 8004d00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004d04:	f1ca 0217 	rsb	r2, sl, #23
 8004d08:	fa43 fb02 	asr.w	fp, r3, r2
 8004d0c:	f1bb 0f00 	cmp.w	fp, #0
 8004d10:	dd65      	ble.n	8004dde <__kernel_rem_pio2+0x26e>
 8004d12:	9b02      	ldr	r3, [sp, #8]
 8004d14:	2200      	movs	r2, #0
 8004d16:	3301      	adds	r3, #1
 8004d18:	9302      	str	r3, [sp, #8]
 8004d1a:	4615      	mov	r5, r2
 8004d1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004d20:	4294      	cmp	r4, r2
 8004d22:	f300 809f 	bgt.w	8004e64 <__kernel_rem_pio2+0x2f4>
 8004d26:	f1ba 0f00 	cmp.w	sl, #0
 8004d2a:	dd07      	ble.n	8004d3c <__kernel_rem_pio2+0x1cc>
 8004d2c:	f1ba 0f01 	cmp.w	sl, #1
 8004d30:	f000 80c1 	beq.w	8004eb6 <__kernel_rem_pio2+0x346>
 8004d34:	f1ba 0f02 	cmp.w	sl, #2
 8004d38:	f000 80c7 	beq.w	8004eca <__kernel_rem_pio2+0x35a>
 8004d3c:	f1bb 0f02 	cmp.w	fp, #2
 8004d40:	d14d      	bne.n	8004dde <__kernel_rem_pio2+0x26e>
 8004d42:	4632      	mov	r2, r6
 8004d44:	463b      	mov	r3, r7
 8004d46:	4954      	ldr	r1, [pc, #336]	; (8004e98 <__kernel_rem_pio2+0x328>)
 8004d48:	2000      	movs	r0, #0
 8004d4a:	f7fb fa69 	bl	8000220 <__aeabi_dsub>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460f      	mov	r7, r1
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	d043      	beq.n	8004dde <__kernel_rem_pio2+0x26e>
 8004d56:	4650      	mov	r0, sl
 8004d58:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004e88 <__kernel_rem_pio2+0x318>
 8004d5c:	f000 fa58 	bl	8005210 <scalbn>
 8004d60:	4630      	mov	r0, r6
 8004d62:	4639      	mov	r1, r7
 8004d64:	ec53 2b10 	vmov	r2, r3, d0
 8004d68:	f7fb fa5a 	bl	8000220 <__aeabi_dsub>
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	460f      	mov	r7, r1
 8004d70:	e035      	b.n	8004dde <__kernel_rem_pio2+0x26e>
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <__kernel_rem_pio2+0x32c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	4630      	mov	r0, r6
 8004d78:	4639      	mov	r1, r7
 8004d7a:	f7fb fc09 	bl	8000590 <__aeabi_dmul>
 8004d7e:	f7fb feb7 	bl	8000af0 <__aeabi_d2iz>
 8004d82:	f7fb fb9b 	bl	80004bc <__aeabi_i2d>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	ec43 2b18 	vmov	d8, r2, r3
 8004d8e:	4b44      	ldr	r3, [pc, #272]	; (8004ea0 <__kernel_rem_pio2+0x330>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	f7fb fbfd 	bl	8000590 <__aeabi_dmul>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	f7fb fa3f 	bl	8000220 <__aeabi_dsub>
 8004da2:	f7fb fea5 	bl	8000af0 <__aeabi_d2iz>
 8004da6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004daa:	f84b 0b04 	str.w	r0, [fp], #4
 8004dae:	ec51 0b18 	vmov	r0, r1, d8
 8004db2:	f7fb fa37 	bl	8000224 <__adddf3>
 8004db6:	f109 39ff 	add.w	r9, r9, #4294967295
 8004dba:	4606      	mov	r6, r0
 8004dbc:	460f      	mov	r7, r1
 8004dbe:	e75b      	b.n	8004c78 <__kernel_rem_pio2+0x108>
 8004dc0:	d106      	bne.n	8004dd0 <__kernel_rem_pio2+0x260>
 8004dc2:	1e63      	subs	r3, r4, #1
 8004dc4:	aa0c      	add	r2, sp, #48	; 0x30
 8004dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dca:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8004dce:	e79d      	b.n	8004d0c <__kernel_rem_pio2+0x19c>
 8004dd0:	4b34      	ldr	r3, [pc, #208]	; (8004ea4 <__kernel_rem_pio2+0x334>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f7fb fe62 	bl	8000a9c <__aeabi_dcmpge>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d140      	bne.n	8004e5e <__kernel_rem_pio2+0x2ee>
 8004ddc:	4683      	mov	fp, r0
 8004dde:	2200      	movs	r2, #0
 8004de0:	2300      	movs	r3, #0
 8004de2:	4630      	mov	r0, r6
 8004de4:	4639      	mov	r1, r7
 8004de6:	f7fb fe3b 	bl	8000a60 <__aeabi_dcmpeq>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f000 80c1 	beq.w	8004f72 <__kernel_rem_pio2+0x402>
 8004df0:	1e65      	subs	r5, r4, #1
 8004df2:	462b      	mov	r3, r5
 8004df4:	2200      	movs	r2, #0
 8004df6:	9900      	ldr	r1, [sp, #0]
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	da6d      	bge.n	8004ed8 <__kernel_rem_pio2+0x368>
 8004dfc:	2a00      	cmp	r2, #0
 8004dfe:	f000 808a 	beq.w	8004f16 <__kernel_rem_pio2+0x3a6>
 8004e02:	ab0c      	add	r3, sp, #48	; 0x30
 8004e04:	f1aa 0a18 	sub.w	sl, sl, #24
 8004e08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80ae 	beq.w	8004f6e <__kernel_rem_pio2+0x3fe>
 8004e12:	4650      	mov	r0, sl
 8004e14:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004e88 <__kernel_rem_pio2+0x318>
 8004e18:	f000 f9fa 	bl	8005210 <scalbn>
 8004e1c:	1c6b      	adds	r3, r5, #1
 8004e1e:	00da      	lsls	r2, r3, #3
 8004e20:	9205      	str	r2, [sp, #20]
 8004e22:	ec57 6b10 	vmov	r6, r7, d0
 8004e26:	aa70      	add	r2, sp, #448	; 0x1c0
 8004e28:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004e9c <__kernel_rem_pio2+0x32c>
 8004e2c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004e30:	462c      	mov	r4, r5
 8004e32:	f04f 0800 	mov.w	r8, #0
 8004e36:	2c00      	cmp	r4, #0
 8004e38:	f280 80d4 	bge.w	8004fe4 <__kernel_rem_pio2+0x474>
 8004e3c:	462c      	mov	r4, r5
 8004e3e:	2c00      	cmp	r4, #0
 8004e40:	f2c0 8102 	blt.w	8005048 <__kernel_rem_pio2+0x4d8>
 8004e44:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <__kernel_rem_pio2+0x338>)
 8004e46:	461e      	mov	r6, r3
 8004e48:	ab70      	add	r3, sp, #448	; 0x1c0
 8004e4a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004e4e:	1b2b      	subs	r3, r5, r4
 8004e50:	f04f 0900 	mov.w	r9, #0
 8004e54:	f04f 0a00 	mov.w	sl, #0
 8004e58:	2700      	movs	r7, #0
 8004e5a:	9306      	str	r3, [sp, #24]
 8004e5c:	e0e6      	b.n	800502c <__kernel_rem_pio2+0x4bc>
 8004e5e:	f04f 0b02 	mov.w	fp, #2
 8004e62:	e756      	b.n	8004d12 <__kernel_rem_pio2+0x1a2>
 8004e64:	f8d8 3000 	ldr.w	r3, [r8]
 8004e68:	bb05      	cbnz	r5, 8004eac <__kernel_rem_pio2+0x33c>
 8004e6a:	b123      	cbz	r3, 8004e76 <__kernel_rem_pio2+0x306>
 8004e6c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004e70:	f8c8 3000 	str.w	r3, [r8]
 8004e74:	2301      	movs	r3, #1
 8004e76:	3201      	adds	r2, #1
 8004e78:	f108 0804 	add.w	r8, r8, #4
 8004e7c:	461d      	mov	r5, r3
 8004e7e:	e74f      	b.n	8004d20 <__kernel_rem_pio2+0x1b0>
	...
 8004e8c:	3ff00000 	.word	0x3ff00000
 8004e90:	08005540 	.word	0x08005540
 8004e94:	40200000 	.word	0x40200000
 8004e98:	3ff00000 	.word	0x3ff00000
 8004e9c:	3e700000 	.word	0x3e700000
 8004ea0:	41700000 	.word	0x41700000
 8004ea4:	3fe00000 	.word	0x3fe00000
 8004ea8:	08005500 	.word	0x08005500
 8004eac:	1acb      	subs	r3, r1, r3
 8004eae:	f8c8 3000 	str.w	r3, [r8]
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	e7df      	b.n	8004e76 <__kernel_rem_pio2+0x306>
 8004eb6:	1e62      	subs	r2, r4, #1
 8004eb8:	ab0c      	add	r3, sp, #48	; 0x30
 8004eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ec2:	a90c      	add	r1, sp, #48	; 0x30
 8004ec4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004ec8:	e738      	b.n	8004d3c <__kernel_rem_pio2+0x1cc>
 8004eca:	1e62      	subs	r2, r4, #1
 8004ecc:	ab0c      	add	r3, sp, #48	; 0x30
 8004ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ed6:	e7f4      	b.n	8004ec2 <__kernel_rem_pio2+0x352>
 8004ed8:	a90c      	add	r1, sp, #48	; 0x30
 8004eda:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	e788      	b.n	8004df6 <__kernel_rem_pio2+0x286>
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004eea:	2900      	cmp	r1, #0
 8004eec:	d0fa      	beq.n	8004ee4 <__kernel_rem_pio2+0x374>
 8004eee:	9a08      	ldr	r2, [sp, #32]
 8004ef0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8004ef4:	446a      	add	r2, sp
 8004ef6:	3a98      	subs	r2, #152	; 0x98
 8004ef8:	9208      	str	r2, [sp, #32]
 8004efa:	9a06      	ldr	r2, [sp, #24]
 8004efc:	a920      	add	r1, sp, #128	; 0x80
 8004efe:	18a2      	adds	r2, r4, r2
 8004f00:	18e3      	adds	r3, r4, r3
 8004f02:	f104 0801 	add.w	r8, r4, #1
 8004f06:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	9b02      	ldr	r3, [sp, #8]
 8004f0e:	4543      	cmp	r3, r8
 8004f10:	da04      	bge.n	8004f1c <__kernel_rem_pio2+0x3ac>
 8004f12:	461c      	mov	r4, r3
 8004f14:	e6a2      	b.n	8004c5c <__kernel_rem_pio2+0xec>
 8004f16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e7e4      	b.n	8004ee6 <__kernel_rem_pio2+0x376>
 8004f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f1e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004f22:	f7fb facb 	bl	80004bc <__aeabi_i2d>
 8004f26:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f2c:	46ab      	mov	fp, r5
 8004f2e:	461c      	mov	r4, r3
 8004f30:	f04f 0900 	mov.w	r9, #0
 8004f34:	2600      	movs	r6, #0
 8004f36:	2700      	movs	r7, #0
 8004f38:	9b05      	ldr	r3, [sp, #20]
 8004f3a:	4599      	cmp	r9, r3
 8004f3c:	dd06      	ble.n	8004f4c <__kernel_rem_pio2+0x3dc>
 8004f3e:	9b08      	ldr	r3, [sp, #32]
 8004f40:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004f44:	f108 0801 	add.w	r8, r8, #1
 8004f48:	9308      	str	r3, [sp, #32]
 8004f4a:	e7df      	b.n	8004f0c <__kernel_rem_pio2+0x39c>
 8004f4c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004f50:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004f54:	f7fb fb1c 	bl	8000590 <__aeabi_dmul>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	4639      	mov	r1, r7
 8004f60:	f7fb f960 	bl	8000224 <__adddf3>
 8004f64:	f109 0901 	add.w	r9, r9, #1
 8004f68:	4606      	mov	r6, r0
 8004f6a:	460f      	mov	r7, r1
 8004f6c:	e7e4      	b.n	8004f38 <__kernel_rem_pio2+0x3c8>
 8004f6e:	3d01      	subs	r5, #1
 8004f70:	e747      	b.n	8004e02 <__kernel_rem_pio2+0x292>
 8004f72:	ec47 6b10 	vmov	d0, r6, r7
 8004f76:	f1ca 0000 	rsb	r0, sl, #0
 8004f7a:	f000 f949 	bl	8005210 <scalbn>
 8004f7e:	ec57 6b10 	vmov	r6, r7, d0
 8004f82:	4ba0      	ldr	r3, [pc, #640]	; (8005204 <__kernel_rem_pio2+0x694>)
 8004f84:	ee10 0a10 	vmov	r0, s0
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	f7fb fd86 	bl	8000a9c <__aeabi_dcmpge>
 8004f90:	b1f8      	cbz	r0, 8004fd2 <__kernel_rem_pio2+0x462>
 8004f92:	4b9d      	ldr	r3, [pc, #628]	; (8005208 <__kernel_rem_pio2+0x698>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	4630      	mov	r0, r6
 8004f98:	4639      	mov	r1, r7
 8004f9a:	f7fb faf9 	bl	8000590 <__aeabi_dmul>
 8004f9e:	f7fb fda7 	bl	8000af0 <__aeabi_d2iz>
 8004fa2:	4680      	mov	r8, r0
 8004fa4:	f7fb fa8a 	bl	80004bc <__aeabi_i2d>
 8004fa8:	4b96      	ldr	r3, [pc, #600]	; (8005204 <__kernel_rem_pio2+0x694>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	f7fb faf0 	bl	8000590 <__aeabi_dmul>
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f7fb f932 	bl	8000220 <__aeabi_dsub>
 8004fbc:	f7fb fd98 	bl	8000af0 <__aeabi_d2iz>
 8004fc0:	1c65      	adds	r5, r4, #1
 8004fc2:	ab0c      	add	r3, sp, #48	; 0x30
 8004fc4:	f10a 0a18 	add.w	sl, sl, #24
 8004fc8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004fcc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004fd0:	e71f      	b.n	8004e12 <__kernel_rem_pio2+0x2a2>
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	f7fb fd8b 	bl	8000af0 <__aeabi_d2iz>
 8004fda:	ab0c      	add	r3, sp, #48	; 0x30
 8004fdc:	4625      	mov	r5, r4
 8004fde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004fe2:	e716      	b.n	8004e12 <__kernel_rem_pio2+0x2a2>
 8004fe4:	ab0c      	add	r3, sp, #48	; 0x30
 8004fe6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004fea:	f7fb fa67 	bl	80004bc <__aeabi_i2d>
 8004fee:	4632      	mov	r2, r6
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	f7fb facd 	bl	8000590 <__aeabi_dmul>
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fac5 	bl	8000590 <__aeabi_dmul>
 8005006:	3c01      	subs	r4, #1
 8005008:	4606      	mov	r6, r0
 800500a:	460f      	mov	r7, r1
 800500c:	e713      	b.n	8004e36 <__kernel_rem_pio2+0x2c6>
 800500e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005012:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005016:	f7fb fabb 	bl	8000590 <__aeabi_dmul>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4648      	mov	r0, r9
 8005020:	4651      	mov	r1, sl
 8005022:	f7fb f8ff 	bl	8000224 <__adddf3>
 8005026:	3701      	adds	r7, #1
 8005028:	4681      	mov	r9, r0
 800502a:	468a      	mov	sl, r1
 800502c:	9b00      	ldr	r3, [sp, #0]
 800502e:	429f      	cmp	r7, r3
 8005030:	dc02      	bgt.n	8005038 <__kernel_rem_pio2+0x4c8>
 8005032:	9b06      	ldr	r3, [sp, #24]
 8005034:	429f      	cmp	r7, r3
 8005036:	ddea      	ble.n	800500e <__kernel_rem_pio2+0x49e>
 8005038:	9a06      	ldr	r2, [sp, #24]
 800503a:	ab48      	add	r3, sp, #288	; 0x120
 800503c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005040:	e9c6 9a00 	strd	r9, sl, [r6]
 8005044:	3c01      	subs	r4, #1
 8005046:	e6fa      	b.n	8004e3e <__kernel_rem_pio2+0x2ce>
 8005048:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800504a:	2b02      	cmp	r3, #2
 800504c:	dc0b      	bgt.n	8005066 <__kernel_rem_pio2+0x4f6>
 800504e:	2b00      	cmp	r3, #0
 8005050:	dc39      	bgt.n	80050c6 <__kernel_rem_pio2+0x556>
 8005052:	d05d      	beq.n	8005110 <__kernel_rem_pio2+0x5a0>
 8005054:	9b02      	ldr	r3, [sp, #8]
 8005056:	f003 0007 	and.w	r0, r3, #7
 800505a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800505e:	ecbd 8b02 	vpop	{d8}
 8005062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005066:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005068:	2b03      	cmp	r3, #3
 800506a:	d1f3      	bne.n	8005054 <__kernel_rem_pio2+0x4e4>
 800506c:	9b05      	ldr	r3, [sp, #20]
 800506e:	9500      	str	r5, [sp, #0]
 8005070:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005074:	eb0d 0403 	add.w	r4, sp, r3
 8005078:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800507c:	46a2      	mov	sl, r4
 800507e:	9b00      	ldr	r3, [sp, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f1aa 0a08 	sub.w	sl, sl, #8
 8005086:	dc69      	bgt.n	800515c <__kernel_rem_pio2+0x5ec>
 8005088:	46aa      	mov	sl, r5
 800508a:	f1ba 0f01 	cmp.w	sl, #1
 800508e:	f1a4 0408 	sub.w	r4, r4, #8
 8005092:	f300 8083 	bgt.w	800519c <__kernel_rem_pio2+0x62c>
 8005096:	9c05      	ldr	r4, [sp, #20]
 8005098:	ab48      	add	r3, sp, #288	; 0x120
 800509a:	441c      	add	r4, r3
 800509c:	2000      	movs	r0, #0
 800509e:	2100      	movs	r1, #0
 80050a0:	2d01      	cmp	r5, #1
 80050a2:	f300 809a 	bgt.w	80051da <__kernel_rem_pio2+0x66a>
 80050a6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80050aa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80050ae:	f1bb 0f00 	cmp.w	fp, #0
 80050b2:	f040 8098 	bne.w	80051e6 <__kernel_rem_pio2+0x676>
 80050b6:	9b04      	ldr	r3, [sp, #16]
 80050b8:	e9c3 7800 	strd	r7, r8, [r3]
 80050bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80050c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80050c4:	e7c6      	b.n	8005054 <__kernel_rem_pio2+0x4e4>
 80050c6:	9e05      	ldr	r6, [sp, #20]
 80050c8:	ab48      	add	r3, sp, #288	; 0x120
 80050ca:	441e      	add	r6, r3
 80050cc:	462c      	mov	r4, r5
 80050ce:	2000      	movs	r0, #0
 80050d0:	2100      	movs	r1, #0
 80050d2:	2c00      	cmp	r4, #0
 80050d4:	da33      	bge.n	800513e <__kernel_rem_pio2+0x5ce>
 80050d6:	f1bb 0f00 	cmp.w	fp, #0
 80050da:	d036      	beq.n	800514a <__kernel_rem_pio2+0x5da>
 80050dc:	4602      	mov	r2, r0
 80050de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050e2:	9c04      	ldr	r4, [sp, #16]
 80050e4:	e9c4 2300 	strd	r2, r3, [r4]
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80050f0:	f7fb f896 	bl	8000220 <__aeabi_dsub>
 80050f4:	ae4a      	add	r6, sp, #296	; 0x128
 80050f6:	2401      	movs	r4, #1
 80050f8:	42a5      	cmp	r5, r4
 80050fa:	da29      	bge.n	8005150 <__kernel_rem_pio2+0x5e0>
 80050fc:	f1bb 0f00 	cmp.w	fp, #0
 8005100:	d002      	beq.n	8005108 <__kernel_rem_pio2+0x598>
 8005102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005106:	4619      	mov	r1, r3
 8005108:	9b04      	ldr	r3, [sp, #16]
 800510a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800510e:	e7a1      	b.n	8005054 <__kernel_rem_pio2+0x4e4>
 8005110:	9c05      	ldr	r4, [sp, #20]
 8005112:	ab48      	add	r3, sp, #288	; 0x120
 8005114:	441c      	add	r4, r3
 8005116:	2000      	movs	r0, #0
 8005118:	2100      	movs	r1, #0
 800511a:	2d00      	cmp	r5, #0
 800511c:	da09      	bge.n	8005132 <__kernel_rem_pio2+0x5c2>
 800511e:	f1bb 0f00 	cmp.w	fp, #0
 8005122:	d002      	beq.n	800512a <__kernel_rem_pio2+0x5ba>
 8005124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005128:	4619      	mov	r1, r3
 800512a:	9b04      	ldr	r3, [sp, #16]
 800512c:	e9c3 0100 	strd	r0, r1, [r3]
 8005130:	e790      	b.n	8005054 <__kernel_rem_pio2+0x4e4>
 8005132:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005136:	f7fb f875 	bl	8000224 <__adddf3>
 800513a:	3d01      	subs	r5, #1
 800513c:	e7ed      	b.n	800511a <__kernel_rem_pio2+0x5aa>
 800513e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005142:	f7fb f86f 	bl	8000224 <__adddf3>
 8005146:	3c01      	subs	r4, #1
 8005148:	e7c3      	b.n	80050d2 <__kernel_rem_pio2+0x562>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	e7c8      	b.n	80050e2 <__kernel_rem_pio2+0x572>
 8005150:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005154:	f7fb f866 	bl	8000224 <__adddf3>
 8005158:	3401      	adds	r4, #1
 800515a:	e7cd      	b.n	80050f8 <__kernel_rem_pio2+0x588>
 800515c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005160:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005164:	9b00      	ldr	r3, [sp, #0]
 8005166:	3b01      	subs	r3, #1
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4632      	mov	r2, r6
 800516c:	463b      	mov	r3, r7
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	f7fb f857 	bl	8000224 <__adddf3>
 8005176:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4640      	mov	r0, r8
 8005180:	4649      	mov	r1, r9
 8005182:	f7fb f84d 	bl	8000220 <__aeabi_dsub>
 8005186:	4632      	mov	r2, r6
 8005188:	463b      	mov	r3, r7
 800518a:	f7fb f84b 	bl	8000224 <__adddf3>
 800518e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005192:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005196:	ed8a 7b00 	vstr	d7, [sl]
 800519a:	e770      	b.n	800507e <__kernel_rem_pio2+0x50e>
 800519c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80051a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80051a4:	4640      	mov	r0, r8
 80051a6:	4632      	mov	r2, r6
 80051a8:	463b      	mov	r3, r7
 80051aa:	4649      	mov	r1, r9
 80051ac:	f7fb f83a 	bl	8000224 <__adddf3>
 80051b0:	e9cd 0100 	strd	r0, r1, [sp]
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4640      	mov	r0, r8
 80051ba:	4649      	mov	r1, r9
 80051bc:	f7fb f830 	bl	8000220 <__aeabi_dsub>
 80051c0:	4632      	mov	r2, r6
 80051c2:	463b      	mov	r3, r7
 80051c4:	f7fb f82e 	bl	8000224 <__adddf3>
 80051c8:	ed9d 7b00 	vldr	d7, [sp]
 80051cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051d0:	ed84 7b00 	vstr	d7, [r4]
 80051d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051d8:	e757      	b.n	800508a <__kernel_rem_pio2+0x51a>
 80051da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80051de:	f7fb f821 	bl	8000224 <__adddf3>
 80051e2:	3d01      	subs	r5, #1
 80051e4:	e75c      	b.n	80050a0 <__kernel_rem_pio2+0x530>
 80051e6:	9b04      	ldr	r3, [sp, #16]
 80051e8:	9a04      	ldr	r2, [sp, #16]
 80051ea:	601f      	str	r7, [r3, #0]
 80051ec:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80051f0:	605c      	str	r4, [r3, #4]
 80051f2:	609d      	str	r5, [r3, #8]
 80051f4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80051f8:	60d3      	str	r3, [r2, #12]
 80051fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051fe:	6110      	str	r0, [r2, #16]
 8005200:	6153      	str	r3, [r2, #20]
 8005202:	e727      	b.n	8005054 <__kernel_rem_pio2+0x4e4>
 8005204:	41700000 	.word	0x41700000
 8005208:	3e700000 	.word	0x3e700000
 800520c:	00000000 	.word	0x00000000

08005210 <scalbn>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	ec55 4b10 	vmov	r4, r5, d0
 8005216:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800521a:	4606      	mov	r6, r0
 800521c:	462b      	mov	r3, r5
 800521e:	b999      	cbnz	r1, 8005248 <scalbn+0x38>
 8005220:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005224:	4323      	orrs	r3, r4
 8005226:	d03f      	beq.n	80052a8 <scalbn+0x98>
 8005228:	4b35      	ldr	r3, [pc, #212]	; (8005300 <scalbn+0xf0>)
 800522a:	4629      	mov	r1, r5
 800522c:	ee10 0a10 	vmov	r0, s0
 8005230:	2200      	movs	r2, #0
 8005232:	f7fb f9ad 	bl	8000590 <__aeabi_dmul>
 8005236:	4b33      	ldr	r3, [pc, #204]	; (8005304 <scalbn+0xf4>)
 8005238:	429e      	cmp	r6, r3
 800523a:	4604      	mov	r4, r0
 800523c:	460d      	mov	r5, r1
 800523e:	da10      	bge.n	8005262 <scalbn+0x52>
 8005240:	a327      	add	r3, pc, #156	; (adr r3, 80052e0 <scalbn+0xd0>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	e01f      	b.n	8005288 <scalbn+0x78>
 8005248:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800524c:	4291      	cmp	r1, r2
 800524e:	d10c      	bne.n	800526a <scalbn+0x5a>
 8005250:	ee10 2a10 	vmov	r2, s0
 8005254:	4620      	mov	r0, r4
 8005256:	4629      	mov	r1, r5
 8005258:	f7fa ffe4 	bl	8000224 <__adddf3>
 800525c:	4604      	mov	r4, r0
 800525e:	460d      	mov	r5, r1
 8005260:	e022      	b.n	80052a8 <scalbn+0x98>
 8005262:	460b      	mov	r3, r1
 8005264:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005268:	3936      	subs	r1, #54	; 0x36
 800526a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800526e:	4296      	cmp	r6, r2
 8005270:	dd0d      	ble.n	800528e <scalbn+0x7e>
 8005272:	2d00      	cmp	r5, #0
 8005274:	a11c      	add	r1, pc, #112	; (adr r1, 80052e8 <scalbn+0xd8>)
 8005276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800527a:	da02      	bge.n	8005282 <scalbn+0x72>
 800527c:	a11c      	add	r1, pc, #112	; (adr r1, 80052f0 <scalbn+0xe0>)
 800527e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005282:	a319      	add	r3, pc, #100	; (adr r3, 80052e8 <scalbn+0xd8>)
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f7fb f982 	bl	8000590 <__aeabi_dmul>
 800528c:	e7e6      	b.n	800525c <scalbn+0x4c>
 800528e:	1872      	adds	r2, r6, r1
 8005290:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005294:	428a      	cmp	r2, r1
 8005296:	dcec      	bgt.n	8005272 <scalbn+0x62>
 8005298:	2a00      	cmp	r2, #0
 800529a:	dd08      	ble.n	80052ae <scalbn+0x9e>
 800529c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80052a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80052a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80052a8:	ec45 4b10 	vmov	d0, r4, r5
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80052b2:	da08      	bge.n	80052c6 <scalbn+0xb6>
 80052b4:	2d00      	cmp	r5, #0
 80052b6:	a10a      	add	r1, pc, #40	; (adr r1, 80052e0 <scalbn+0xd0>)
 80052b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052bc:	dac0      	bge.n	8005240 <scalbn+0x30>
 80052be:	a10e      	add	r1, pc, #56	; (adr r1, 80052f8 <scalbn+0xe8>)
 80052c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052c4:	e7bc      	b.n	8005240 <scalbn+0x30>
 80052c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80052ca:	3236      	adds	r2, #54	; 0x36
 80052cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80052d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80052d4:	4620      	mov	r0, r4
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <scalbn+0xf8>)
 80052d8:	2200      	movs	r2, #0
 80052da:	e7d5      	b.n	8005288 <scalbn+0x78>
 80052dc:	f3af 8000 	nop.w
 80052e0:	c2f8f359 	.word	0xc2f8f359
 80052e4:	01a56e1f 	.word	0x01a56e1f
 80052e8:	8800759c 	.word	0x8800759c
 80052ec:	7e37e43c 	.word	0x7e37e43c
 80052f0:	8800759c 	.word	0x8800759c
 80052f4:	fe37e43c 	.word	0xfe37e43c
 80052f8:	c2f8f359 	.word	0xc2f8f359
 80052fc:	81a56e1f 	.word	0x81a56e1f
 8005300:	43500000 	.word	0x43500000
 8005304:	ffff3cb0 	.word	0xffff3cb0
 8005308:	3c900000 	.word	0x3c900000

0800530c <_init>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr

08005318 <_fini>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr
